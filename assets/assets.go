// Code generated by go-bindata.
// sources:
// dist/velox.min.js
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distVeloxMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x3a\x69\x73\xdb\x46\x96\xdf\xf3\x2b\xc0\xae\x14\x0b\x18\x35\x41\xca\x93\xcc\xee\x12\x6e\x6b\x15\x99\x49\x94\x52\x48\xaf\x24\x4f\xb2\x25\x2b\x34\x04\x36\x49\x24\x50\x03\xdb\x68\x4a\xe6\x8a\xc8\x6f\xdf\xf7\xfa\x00\xc0\x43\xb2\xa7\x76\xaa\xe6\x0b\x09\xf4\xf1\xfa\xdd\x57\xa3\xdf\xf7\x1e\x78\x96\x7f\xf2\x7a\xde\xc3\x20\x7c\x15\x1e\xc3\xc3\x52\xa9\xa2\x1c\xf6\xfb\x8b\x54\x2d\x57\x77\x61\x92\xdf\xf7\x7f\x2f\xd2\x2c\xcb\x65\xdc\xd7\x8b\xbf\x82\x5d\x3f\xc5\xe9\x3d\xf7\xde\x99\x61\xef\xf5\x8c\x3f\xfc\xa7\x5b\x84\x3b\xde\x00\x9c\x9f\xcf\xaf\xbd\xb3\xbc\x58\xcb\x74\xb1\x54\xde\xab\xc1\xf1\xdf\xbe\xea\xcc\x57\x22\x51\x69\x2e\xfc\xe0\xa9\x79\x56\xc1\x53\x3a\xf7\x3b\x3e\x19\x3d\x70\xa1\xae\xf2\x95\x4c\x38\x49\x85\xa7\x82\xe0\xe9\x21\x96\x1e\x67\xfd\xdf\xfc\x0f\xe5\xe6\xc3\x6a\x30\x38\x1d\x04\x47\x9b\xf6\xcb\xd7\xfd\x05\x15\xac\x0d\xcb\x3d\x7b\x06\x72\x38\x2d\xf2\x2c\xbb\x06\x74\x25\x2b\xb9\xc2\x87\x7c\xa5\xfc\x16\x26\x79\x98\xc4\x59\xe6\xa7\x41\x45\x55\x50\xd5\xdb\x73\x98\x52\x72\x8d\xb8\xa5\xa1\xe4\xf1\x6c\x7d\xa5\x62\xc5\x19\x4b\xc3\xb3\x8b\xc9\xd5\xe8\x6d\x20\xb9\x5a\x49\x11\x21\x8e\x8a\x09\xfe\xe8\xfd\xfa\xf3\xc5\x8f\xc0\xbd\x4b\xfe\x3f\x2b\x5e\xaa\x48\x85\x79\xc1\x85\x4f\x7e\x18\x5d\x13\x9a\x86\xef\x2f\x2f\x68\x67\x10\x50\x15\x02\x1e\x76\xcd\x8f\x00\x97\x4b\x9f\x9c\x26\x09\x2f\x14\xa1\x44\xf1\x4f\xaa\xcf\x91\x11\xbd\x52\xc1\xa9\xf7\xe4\xf0\x86\xb3\x38\x59\xf2\xde\x59\x2e\x94\xcc\x33\xd8\x27\xf2\x5e\x82\x43\xcf\x2c\xff\xb5\x67\x07\xf8\xac\xf7\x0b\x08\x16\x76\x6c\x23\x0b\xfb\xc4\x2a\xcb\x3a\xac\xec\x76\x0f\x01\xb8\x88\x4b\xd5\xd3\x02\xea\x9d\xbf\x25\xb4\x0c\xe8\x92\x11\x02\x67\x29\xc3\x50\xf6\x2d\xff\x06\xde\x72\xa1\x39\x55\x22\xa7\x92\x65\x2c\x16\x9c\xb5\x38\x0d\xac\xfc\x2b\x63\x6a\x99\x96\x2d\x86\x6e\x36\xdf\xec\x8d\x75\xbb\xaf\x06\x03\x3b\x8a\xb0\x56\x25\x4a\x72\x47\x08\x93\xf1\x78\x74\x76\x7d\x3e\xfe\xa1\xdb\xdd\x96\x50\x1a\x4e\xde\x8d\xc6\xc0\xf1\x59\x5a\x16\xb1\x4a\x96\x1a\x6f\x9f\xa0\x34\x08\x7d\x52\xeb\x82\x0f\xcd\x4b\x15\x04\x56\x7c\x84\x44\x28\x6c\xe5\x30\x29\x8b\x5c\x94\xfc\x1a\xa4\xb1\xd9\x10\x52\x25\x08\xc6\xcf\x83\xa7\x0a\x97\x17\x0c\x58\xb4\xba\x03\x01\xf9\xcb\x30\xe3\x62\xa1\x96\x41\x58\x16\x59\x0a\x87\x7c\x10\xc0\xca\x84\x91\x7b\x5e\x96\xf1\x82\x13\x9a\xb1\x9b\x5b\xba\x62\x03\x3a\xc7\x43\xe6\x39\xec\x61\x2a\x5a\xbd\x2e\xec\xce\x68\x75\x74\x14\x00\x67\xe6\xac\xb8\x59\xdd\xc2\xd1\x45\x16\x27\xdc\xe7\x94\x00\x20\x60\xc2\x3c\x4c\xc5\x8c\x7f\x9a\xcc\x7d\xa2\xf5\x82\x04\x41\x02\x83\x6e\x9d\x51\x96\xe1\xc9\x87\xf2\x2f\x7d\xdc\x12\xf1\xac\xe4\x1e\xc0\xdb\xde\x0a\xba\x2a\xd7\xb0\x55\xff\xb3\x22\x96\x25\x3f\x07\x9e\xb4\xe0\xe8\x99\x06\x4e\x40\xd3\x72\x1c\x8f\x7d\x3d\x1c\x6c\x36\x7e\xcc\xcc\xe3\x33\x07\xcc\x62\x15\xc3\xae\x2c\x2c\x56\xe5\xb2\x0d\x17\x27\x5a\x60\x9f\xd9\x9e\xce\x86\x30\x59\xb6\x09\x83\xa1\xcf\x51\x95\xce\xf4\x26\xd4\xdc\x7a\x05\x21\xb0\xa4\xdb\xcd\x9c\x60\xb4\x0f\x99\x69\xfb\x94\x7e\x16\xfe\x9e\xa7\xc2\x4a\x29\x0d\x57\x32\x03\x55\x8e\x76\x35\x25\xa1\xb3\xc0\xc8\xad\x25\xc8\xea\x90\x9a\x0a\x3f\x0e\x2a\x73\x72\x6b\xbc\xd3\x38\x09\xd0\xcd\xfd\x7d\x27\xbb\xfa\xda\xe8\xf2\xbe\xd6\x72\x29\x73\x59\xab\xad\x79\xab\xc0\x5a\xe1\xe4\x60\x38\x78\x06\x27\xf4\x65\x60\xc5\x62\xe6\x07\xf4\xb0\xd7\x53\x61\x7c\x97\x4b\xe5\xeb\x95\xd6\x88\x91\x25\xd3\x4f\x4b\xc9\x54\xa3\xf0\x5f\x84\x0f\xd5\x42\xce\x43\xcb\xab\x2a\xa8\xb4\x9d\xa4\x1a\x39\x1a\xb3\x6f\x07\x03\x6a\xc4\xa4\xdd\x46\x84\xfe\x1e\x0d\x0b\x2c\x28\x15\x0b\xd2\x61\x08\x2c\x9f\x83\xcb\x57\x4b\x99\x3f\x7a\x28\xac\xab\xb5\x50\xf1\xa7\x11\xc2\xf7\xc9\x38\x57\x1e\x17\xf9\x6a\xb1\xf4\x62\xb9\x58\xdd\x03\x26\x25\x68\x85\xa6\x1d\xfc\x2a\x53\x74\x87\x0d\x86\x2d\x2d\xbe\xea\xf7\x56\x2c\xd0\xc8\x98\x41\xa4\x58\xbf\x82\xcb\xaf\x22\x11\x16\x32\x57\x39\x62\xc4\x9e\x92\x2c\x2f\xf9\xb0\xcd\xb6\x83\xc7\x68\x51\xd3\x24\xe3\xb1\x04\xab\xe2\xf2\x21\xce\xfc\x9d\x03\x83\xe6\xb0\x86\xf3\x0d\x7e\xc3\x01\x45\xa7\x35\x3c\xa6\x06\xd8\xf0\x15\xdd\xe2\x7b\x83\x83\xa2\xdc\xe8\xb4\xd0\x87\xdf\x90\x29\x39\x52\x47\xe4\xc7\x58\xcc\x32\x2e\x4b\x72\x8b\xdc\x15\x01\x3a\x1a\x5c\x25\xd9\x20\x92\xaf\x85\x73\x36\x12\x9c\x8d\xb8\x91\xb7\x26\xe6\x69\xf1\x70\xc3\xc7\x1b\x92\x0b\x80\x74\x0b\xfe\xbf\xf5\xb6\xb5\xae\xa2\xf1\x6c\xa6\xd1\xb9\x48\x21\x94\x08\x2e\x77\xd0\x3a\x8c\x10\x38\x8f\xc3\x13\x60\x61\x86\x2d\xfb\x53\xc6\x8d\xe0\x91\x92\xdf\xe7\x0f\xfc\xa5\x53\xff\x11\x66\x38\x46\xf4\x8e\x23\xf9\x06\x58\xd3\xeb\x49\x74\xbe\xc8\x12\xc6\x18\x00\x13\xda\x91\x83\xff\x91\xf4\x38\x88\xee\x40\xd4\x7f\x54\x15\xcd\x85\x56\xf4\xa1\x51\x13\x61\xf5\xdc\xbd\x62\x2c\x31\xcf\x8d\x66\x80\x40\x41\x31\x87\x10\x3b\x22\x73\x72\x1b\x67\x2a\xac\x26\xa1\xdd\x38\xe5\xcd\x21\x53\x4a\x05\xe3\xe6\x2d\x83\x80\xab\x89\x3e\x07\xdf\xa5\x63\x50\x24\xdb\x9a\xa9\x2d\xce\x28\xb1\x36\xc4\x26\xde\x34\x1b\xe1\x74\x6a\xa0\x22\x1e\x94\xdc\xe7\xb3\x55\x66\x72\x2b\xf0\x4b\xe6\x2d\xe4\x9f\x0a\xd0\x46\xb0\x4e\xcc\x1c\x5a\x29\x18\x13\x55\xa5\xe5\x66\x43\x24\xb5\xca\x3e\x9d\x42\x50\x04\xcf\x52\x6e\x36\xdb\x62\x68\x25\x5e\x96\xba\x04\x62\xa8\x92\xab\x44\xe5\xe8\x52\x6a\x21\x78\x80\x00\x0f\x78\xb8\x8c\xcb\xc9\xa3\x78\x27\x81\x7d\x52\xad\x7d\x19\x00\x52\x0a\x05\xc1\xe1\x27\xd8\x32\x44\xde\x3c\x03\x96\xcd\x38\x3a\x0a\x51\x41\x06\xa8\xfd\x44\xd4\x39\x98\x08\x4a\x83\x5f\xf9\x98\xa2\x4f\xab\x5d\xcd\x53\x12\x97\x9c\xac\x20\x96\xcc\x53\xc1\x67\x64\xa8\xdf\xef\xf2\x1c\xcc\x58\xd8\x37\xeb\xa0\xcc\x8b\x58\xdd\xdf\x71\x49\x86\x26\xef\x83\xa4\x01\x14\x26\xd2\x33\xf9\xdd\xef\x3c\x51\x64\x88\x9a\x04\x22\x81\x09\x65\xb3\x43\xcf\xbe\x73\x54\xc4\xc2\xc7\x9c\x16\x9d\x5f\x01\xaa\xbd\xd9\x28\xab\x8c\x10\x2f\xb8\x0b\x57\x66\x5b\xe7\x38\x72\xec\x12\x90\x3a\xe4\xcc\x2d\x8d\xf2\x37\x22\x12\x26\x63\xe8\x00\x61\x37\xe2\x96\x72\xf8\x09\x9a\x8d\xf6\x61\x60\x5d\x70\x02\x47\x81\x0b\x4e\x1d\x00\xd8\x98\x00\x1e\xcd\xd1\xf1\xc1\x33\xa3\xf8\x8b\x0f\x8a\x80\x83\xf1\x2a\x53\x43\x37\x53\xb5\xb3\x68\x94\x84\x05\x0b\x7a\x0f\xc4\xc8\x86\x18\x09\x67\x04\x4f\xa0\x58\x21\x24\x8b\xf2\x2c\x9f\xf1\x53\x05\xe6\x1a\x99\x82\x80\xbf\x61\xdf\xfc\x7b\xb7\xfb\xed\xbf\xbd\x01\xc3\x6c\x8e\x05\xa4\xaa\xaa\x26\xb2\x3e\x29\x75\x86\x55\xeb\x19\x4d\x81\xee\xce\x31\x44\x9e\x01\x84\x1d\xc7\xe1\x68\xf9\xa6\x84\x43\x25\x68\x59\x79\x4b\xcb\xa3\xa3\x9a\xea\x84\x81\x85\xc5\x6a\x89\xd6\x46\x1f\x58\xe2\x52\xba\x3e\xe4\x0a\x6b\xb0\xd2\x11\x3b\xa6\x13\xf6\x60\xe1\xd0\x05\x7b\xc8\xd3\x99\x37\x88\x22\x2d\xd3\x94\x3d\xdc\x8c\x6e\xa9\xe8\x76\xcd\x30\x08\x7d\x01\x0a\x5d\xbf\xac\x6f\xd2\xdb\x13\xd8\x13\x96\xda\xbd\x0c\xe8\x28\xb0\xc9\x08\xc0\x1f\x8e\x18\x9b\xf4\x8e\x61\xfd\xc2\x22\x11\x50\xb3\xb3\xa3\xc1\x68\x73\x82\xa8\x92\x82\xd9\x03\xb6\x92\x96\xbd\x63\xaa\xe8\x02\xd2\xb4\xd1\xd1\x11\xad\x0f\x49\xbb\xdd\xd1\x1b\x36\x09\x9e\x62\x36\xbf\x91\x50\x7f\x58\x07\x2e\xe9\x1a\xb8\xa1\x9c\x43\xd3\xba\xb8\x36\xba\x48\x7a\x04\x37\x06\x29\x5b\x3b\x0e\x61\x42\x83\x53\x40\x4b\x27\x87\xc2\xa8\x15\x95\x67\x50\xa6\x7d\x2a\x40\xd9\xf9\xcc\x8b\x85\xb7\x12\x65\xba\x00\xe3\xf1\xee\xc0\x0c\x7a\xc7\x03\x30\x6d\xc5\x17\x5c\x7a\x80\xeb\x8a\x53\xef\x3e\xfe\x03\xec\xc7\x53\x4b\xae\x77\x4b\x3e\xe7\x92\x8b\x04\x36\xe8\x05\x7a\x22\x96\x32\x5e\x7b\x3c\xe3\x18\xd5\x3d\x30\xd2\xa5\x1e\xfe\x5f\x2e\xf3\x1e\x82\x9d\x79\x3a\xdf\x83\x92\x05\x22\xe4\xe5\xe9\xf5\xf9\x64\x3c\x7d\x77\x7a\xfd\xe3\xf4\xfc\xe2\x62\xf4\xc3\xe9\xc5\xf4\xf4\xf2\xf2\xf4\xbf\xa7\xe7\xe3\xb7\xa3\x5f\x89\x66\x8c\xe1\x20\x95\x90\xd9\x35\xa9\x6e\x4a\x8f\x07\x01\x52\x6e\x18\x64\xc8\x23\x10\xd0\x90\x7c\x64\x55\xb7\x9b\xbe\x71\x2c\xd8\xa6\xf8\x1a\xd0\x29\x81\xe8\x74\x9e\x3a\x6c\xbc\x9f\xdf\x5f\x5d\x7b\xe3\xc9\xb5\x77\xc7\xbd\x05\x30\x15\xa2\x3e\xa0\x0d\x2c\xd1\xb4\x6a\x4f\xe1\x81\x9b\xb1\x64\x95\xe8\xf3\x6a\x62\xb7\x48\xf9\xfb\xe9\xc5\xfb\xd1\x74\xf2\xfe\x7a\x3a\xf9\x7e\xfa\xdd\xe4\xfd\xf8\xed\xd5\x2e\x15\x31\x5b\xbd\x20\xcc\xca\x65\xbe\x20\xfc\xde\x71\x07\x2c\xbd\xce\x8f\xff\x24\xe8\x53\x53\x96\x36\x59\xf5\x9f\xc7\x50\x31\xa3\xca\xb5\x86\x06\x38\xf4\x27\xe6\xfc\x4e\x79\xb2\x97\x95\xa7\xb3\x06\xef\x09\xce\x1d\x5c\x65\xf8\x18\x4b\x01\x32\xf6\x49\x09\x91\x67\xc9\x35\xa5\xc6\x1f\x7a\x7f\xf0\x75\xe9\x09\x48\xdd\xca\x55\x81\x41\x06\x9c\xac\x03\xb2\xd6\xf6\xe0\xec\xd8\x8b\x1b\x3b\x8e\x6d\x43\xa0\xd6\x69\xe7\x4a\xc1\xd1\xa0\xba\x1a\x0e\xb2\x3a\x65\x04\x6b\xb5\xee\xb7\x19\xab\x03\x3e\xd7\x7c\x47\x1f\x06\x60\x6f\x78\xe3\xbd\x06\x51\xed\xac\xea\x93\x4b\x28\xba\x04\x95\x34\x37\x76\x61\xa1\xd6\xc9\x29\x54\xaa\xce\x99\x6f\x36\xe8\xc0\xb7\x95\x64\x02\x51\x2c\x36\x9e\xc8\x10\x1d\x3b\x3e\x6c\x89\x1b\x54\x66\x7a\x3a\x9e\x4e\xbe\xfb\x09\x12\x3f\x02\xe7\x71\xad\xa7\xc0\xd3\xec\x86\x23\xcf\x9f\x83\xfa\x31\x2f\x3e\x7a\x85\x0d\x96\xee\x0c\xc8\x4b\x50\xcb\x72\xb7\xaa\xf4\x6c\x34\x43\xba\x2f\xbf\x3f\xeb\xfd\xed\x3f\x06\xaf\xb6\xce\x9f\xbc\x03\x4b\x01\x9d\xc3\x2a\xbe\x39\x7c\x2f\x13\xe7\xc6\x09\x3d\x87\x0b\x4e\xee\x63\x13\x7b\x16\xcc\xbe\xa9\xee\x1f\xe9\x13\xcc\xeb\xd0\xf8\x90\x6c\x90\x62\x92\x17\x6b\xf7\x0a\x6a\x7b\x00\xa5\xb9\xcc\xef\x9f\x45\x09\x27\xf7\x51\x2a\xa0\x94\x47\xb7\xe2\xc7\x05\xa6\x75\xf1\x5d\xa6\x55\xe2\x23\x9e\xfd\x11\x44\x34\xf3\x3e\xe2\xb9\x1f\x5b\x2c\x0c\xb6\xd0\xff\xfe\x72\xf2\xf3\xf4\x72\xf4\x5f\xef\xcf\x2f\x47\x3b\xf8\x5b\xdf\x61\xd1\xb7\xe6\xd4\x1a\x51\xd8\x57\x69\x08\xaa\x15\x9a\x87\xda\xf9\x3d\x4b\x89\x9e\xfd\x72\x52\x00\x8d\x8f\xd4\xfb\x68\xcf\xb7\x44\xe1\xd9\xcf\x13\x65\x7c\xce\x3f\x85\xaa\xd8\x77\xe4\xfc\xcb\xe9\x39\x3b\x1d\xa3\x75\x41\x51\x75\x7d\x7a\x3e\x9e\x82\x27\x1d\x7d\x7f\x3e\xde\xa6\x4f\x67\xfb\x96\x46\x4d\xc1\x93\xc9\x92\x8c\xbe\xb7\x22\xbe\x8b\xf2\x25\xcb\xf7\x47\x11\x52\x0a\x91\xb9\x3c\x82\x90\xad\x1f\xb6\x89\x3f\x8b\x85\xa6\x90\x4b\x70\x44\xf7\xe8\x09\x34\x55\x0d\xfe\x5e\xac\x74\x38\x98\xf1\x32\x95\x60\xad\x78\xf8\xbe\xd5\x58\x82\x4e\xdf\xd6\x24\xd4\xbe\xfe\x80\x60\x4c\xa1\xd4\x1a\x98\x2e\x78\x23\x29\x74\x69\x86\x48\x40\x37\x7f\x11\x5d\x44\x6c\x0b\xd3\x58\xe3\x87\xe1\x4d\x79\xb3\x9c\x1b\xf1\xf1\x4f\x50\x8d\xed\xe3\xfc\x7e\x7c\x39\xba\x9a\x5c\xfc\xfd\xf4\xbb\x8b\xd1\x3e\xd6\x2f\x99\xbc\x96\xc4\x92\x3d\xe5\xc5\xd0\xa0\x4e\xf1\xd4\xa1\x31\x7b\xaa\x95\x68\x68\x6c\xa8\xa2\x09\xa4\x8c\x36\x1d\xe2\xfe\xcd\xf2\xd6\x4a\x37\x01\xb7\xf1\x12\x3e\x70\x54\x12\x8a\xf8\x9e\xff\x03\xf4\xe3\xe9\x5f\xca\x01\xed\x2c\x0e\x72\xa0\x89\x32\x4b\x5b\x2a\x9b\xd6\x72\x47\xd7\x04\x5b\xd8\xbc\xc3\xa2\xdf\x2b\xb1\xff\x0a\x99\x92\x77\xbf\x2a\x15\x26\x19\xa0\x44\x2e\x79\xb8\x02\xc3\x1d\x8d\xcf\x46\x2e\x98\xe8\x04\x88\x68\x0e\x40\x5d\xc5\x7e\xba\x9a\x8c\x43\x9d\xf7\xf8\xfa\xd1\x38\xd2\x74\xbe\xc6\x98\x45\xd3\x76\x49\x0f\x39\x64\x67\x60\xbb\x6b\xed\xe4\x5f\xbc\xae\x73\x74\xac\x01\x76\xd2\x4f\x5d\x0c\x88\xc0\x36\x89\xa4\xd6\x2d\xac\xea\x4a\x15\x03\xc6\xe0\xaa\x67\xae\xfa\x91\x91\x21\x4d\x56\x3a\x6d\x50\x21\xda\xfa\xda\x88\xba\x00\x29\xb6\x3a\x2b\x76\xc7\x44\x87\xcc\x10\x53\x87\x93\xd6\xf3\xb0\x5d\xd9\x99\x5b\x81\x9b\xdb\xa6\x5e\x31\x61\x5e\xed\x96\x94\x02\x1c\x14\x37\xad\x04\xa8\x2a\xec\x09\x1c\xea\x5a\x6c\xef\x3d\x81\x49\xee\x74\x12\x5c\x65\x07\x99\x02\x73\x34\x43\x1a\x0b\x65\x86\x6d\x43\x1c\x5e\x3f\x83\x2c\x4f\x71\xbd\xcd\xae\xd5\xb6\xf9\xe5\xc0\xf7\x40\x63\x1d\x63\xda\x06\xbb\xe6\xa0\x77\xa2\x4e\x56\x8e\x9e\xd4\x17\x14\x0b\x66\xaa\x1f\xf4\x7a\xeb\x0a\x76\x77\x6c\xad\x41\x1f\xd8\x5a\xa0\x73\x4d\x63\x64\xd2\x60\x86\xcb\x11\x39\x34\xd2\x7f\x26\x72\x5f\x7c\x30\xfa\xfc\xc3\x3c\x94\x3a\x99\xa3\x0d\x17\x83\x8a\x22\x1a\x07\xda\x51\x66\x9e\xe1\xfa\xaa\xa2\xab\x97\xa4\xee\x3a\x3f\x9c\x0e\xda\xa0\x3f\x2b\xfe\xd6\xc6\xe3\xe0\xff\xa1\x00\x59\x88\x7f\x86\xdf\x59\x88\x7f\x86\x05\x59\x88\x7f\x86\xc0\x2c\xc4\xbf\x8a\xce\x77\x09\x81\xba\x37\x34\x48\xb6\xec\x1b\x72\xf6\xed\x4c\xb8\xa1\xaa\x79\xdc\x35\x1a\x6e\xfa\x30\x5b\x48\x62\xea\xdc\x34\x16\xf6\xb9\xd1\xaa\xf1\x9f\x31\x45\x84\x9a\x1d\xc0\x10\xdb\x8f\x6d\xc0\xbb\x8c\xab\xd9\x86\xf5\xfd\x73\xda\x8d\x4f\x46\xbb\xd5\x67\x95\xac\x21\xca\xe9\xd9\x8b\xcc\x3f\x80\xc9\x8e\x53\x55\x01\x84\x95\xdd\xb1\x17\x34\x73\x5b\x2f\xab\x2a\x2a\xd8\x29\x3a\xf6\x30\x2d\xf5\xff\xc9\xd6\xdb\x21\x04\x94\x76\x69\x10\xeb\x6c\x47\xaa\x29\x7c\xac\xd3\xc6\x9e\xbe\xf6\xb4\x2c\x8d\xcc\xf5\xc7\x33\x37\xa4\xb6\xe0\xa1\x29\x5e\x08\xb4\x5b\xbd\xc6\x00\x6c\x53\xd1\xf5\x24\x31\x72\x32\x61\x9e\x75\x8d\xc9\xa4\x6d\x5d\xba\x68\xc9\x72\x33\xa0\x24\xe7\x2c\x75\xd5\x1d\x07\xdb\x57\x01\x15\x15\x7a\x61\x15\xfe\x54\xe6\x42\x07\x39\xdd\xb4\x63\x33\xec\x3b\xd6\x4f\x75\x94\x61\x65\xf3\xc6\xd9\x12\x9b\x91\xd8\x48\x66\x4f\x15\x04\xb1\x56\xdb\xae\xa9\x0f\x4c\x23\x13\x94\xd7\x3e\x59\x16\x58\x56\x50\x37\x5a\xc3\x6c\xc0\xef\xce\x61\xbf\xb2\x79\xae\x67\x77\x10\xdf\xa5\xa4\x5e\xe7\xa6\xf5\x7f\x40\x6b\xde\x9b\xf6\x54\xab\x2d\x19\x3c\x01\xef\x44\x06\x74\x30\x11\x3f\xa4\x0b\x3c\x0d\x06\x2e\x60\xa0\x31\x5c\x08\xc7\xfc\x75\x5c\xf7\x66\x20\x1c\xbb\x4d\x90\x7d\x83\x61\x86\xf1\x0a\xb6\xe1\xdd\x9c\x7d\xd7\xcf\xfe\xd6\x55\xb6\xf5\xda\xae\x05\x6a\x7a\x9f\x5e\x19\xfe\x72\x65\xec\xe1\xb1\x64\x50\x12\xeb\xd2\x3c\xb2\x53\x57\x57\x23\x33\x57\x96\xbc\x99\x74\xad\x3e\x1d\xd6\xc9\x35\x70\xbe\x4e\x50\xf4\xc7\x01\x00\xd1\xcb\xa5\x7d\x06\x10\x04\xe3\x3e\xd4\xcb\x3e\x67\xc4\x7c\x3e\x40\x02\xda\xff\xcd\x7f\x2c\x37\xf8\xa1\x41\x50\x9e\x0c\xfb\xda\xbd\xe9\x86\x28\xac\x4a\x4c\x77\x37\xc9\xb3\x23\xd2\xef\x93\xa3\x24\x5c\xe6\xa5\x3a\x72\x1a\xf9\xa8\xe5\x0b\x09\x63\xdd\xbd\xf8\x0d\xe1\xf4\x29\x79\x2c\xb1\x81\xa1\x17\xad\x64\x06\x2a\xdb\x11\x4d\x6b\xa0\x56\x12\x61\x72\x2d\x72\x2e\xb4\x78\x5d\x85\x6e\x6e\x92\xe0\xc5\xa9\xf7\x03\x97\x25\xea\xb3\x8d\x04\xb9\x58\x15\x5a\x67\x5a\x09\x4b\xe5\xa6\xf4\xd5\xc0\x81\x99\x24\x17\x42\x77\xca\xb0\x09\xd9\x1e\xf1\x75\x1f\xaa\xc3\xc3\x5f\xf8\xdd\x55\x9e\xfc\xc1\xeb\x6e\x71\x9c\x81\xb3\xc4\x86\x13\xd4\x48\x77\x80\x67\xc9\x65\x93\x6f\xda\x2e\x8a\x57\xef\xc2\x2b\x30\x53\xbe\x90\x07\xa8\xf2\x63\xbc\xb1\x2c\xf7\x2e\x1a\xec\xc5\x07\x24\x97\x4e\x0f\x5c\x70\x8e\x4d\x6a\x04\x2a\x2a\xab\x08\x95\x01\x8c\x8b\x6a\x65\x38\x18\xb8\x4a\x1f\xd7\x68\x97\x8d\xcb\x40\xba\x66\x3d\x2a\xc8\xb3\x1b\x60\x55\xbd\x43\x4b\x96\xa5\xb4\x56\x7a\x50\x2b\x93\xf4\x6f\x6f\x77\xd7\x83\xbb\xc2\x83\xb1\x0e\x3f\x30\xce\x1d\xfb\xb8\x06\x27\x30\x11\x56\xed\x7c\x54\x7b\x52\x48\x05\xf7\xc6\x74\xa3\x28\x72\x6e\xf3\x4d\xdd\x23\x86\xf8\x55\xe4\x85\xdf\xca\x8c\x6d\x8a\x49\xbe\xc6\x22\x42\xdc\x0c\x6e\x37\x1b\x3d\x04\xf8\xd4\xe9\x9f\x30\x19\xa9\x19\x0f\xf0\x9d\x2d\x5b\x9d\x73\xc7\x76\x55\x45\x3c\xdc\xbd\x49\xf3\x89\xe1\x09\x81\x6a\x81\x1e\x9c\x9e\xcf\xdd\x7c\x64\x3e\x42\xb8\x69\x2e\x7d\xdc\x3d\xac\xfd\xc6\x81\xe8\x7b\x4b\x82\xf7\xd7\x40\x52\x9e\x68\xdf\x1c\xe5\x5b\x37\x9b\x46\x15\xf7\xee\x36\x6b\x67\x02\xc2\x71\x97\xaa\xc6\x9d\x50\xf3\x85\x40\x6b\x83\xbe\xf0\x74\x77\xcb\xcd\xda\x50\x05\x8d\xba\xdb\xde\x35\x2e\x05\x1b\xf2\xed\x0c\xb0\x2c\x5e\xdb\x7b\x41\xf3\xc2\x8e\x07\x03\xf7\x31\x86\x33\xe2\x23\xbf\xff\xe1\xc4\xba\x07\x37\x16\x9c\x90\x2e\x19\x92\x13\x12\x1c\x91\x82\x91\xa3\xf4\x88\x74\x1f\xe0\xbf\x6d\xb5\x91\x75\x15\x27\x35\x16\x5a\xfd\x6b\xbb\x01\x07\x38\xdc\x9e\x6a\xdd\x7b\x81\x0a\x3e\x61\x13\xfa\x0c\xea\x72\x18\x4c\xe3\xac\x1c\x42\x96\x60\x70\x33\x77\x60\x51\x11\x82\x9c\x47\x31\xb8\xd2\x76\x5c\xe5\x1a\x9e\xbb\x39\x65\xfc\x86\xe0\xbb\xbe\x45\xbd\x83\x70\x89\xb7\x99\x96\xfc\x02\xd2\x04\xe0\x59\xa8\xf0\x93\xa4\xed\x1b\x63\x37\xa5\x77\xe8\xeb\x37\xfa\x57\xfe\x0d\x70\x7f\x96\x96\x5f\x20\x33\xe7\x68\x1c\xbb\x2b\x6a\x1f\x87\xdb\xdf\xe1\xd4\xe4\x1b\xff\xa0\x9e\xa5\x8b\xeb\xcc\xa0\xa6\x0b\xb2\x42\x6c\x82\x02\x21\xfe\x9e\x88\xe1\xb1\x6d\x60\x2d\x9e\xb6\x56\x6c\x7f\x26\xd1\x5a\x63\x6f\xd1\x37\x9b\x83\xc0\x6a\xd9\x3d\x0b\xaa\x5e\xe1\x3e\xcf\x6a\xaf\xd4\xf6\xe0\xb7\xd4\xd2\x5c\xf8\xef\x2b\x70\x2d\x19\x28\xd9\x29\x7e\x40\x71\x30\xff\xfa\x0c\xe5\x9f\x41\x96\xb5\x91\xc5\x5b\xff\x46\x4f\xcd\x37\x1b\xa0\x9e\xae\xd1\x61\xf1\xd9\x13\xb9\x5e\x47\x70\x96\x04\x66\x55\x2a\x5e\x36\x4d\xb3\xa6\xb6\x4d\xf7\xda\xfe\x28\xae\x65\xc2\x7b\xea\x87\xd8\xb9\x6b\xef\xb6\x72\x18\x87\x8b\xdd\x0c\xd1\x6e\x3c\x70\x7d\xb5\xdd\x6a\x11\x58\xd6\x69\xba\xda\x71\x13\xe6\x5c\x9a\x28\x34\x52\x27\xcd\x12\x83\xa3\x1f\x0c\x45\x78\x97\xcf\xd6\x96\x9b\xe0\xfd\x4f\x7c\x81\x5e\x43\xc5\x27\x36\xb9\xf3\xdd\x0c\x35\x4b\x83\xe1\x72\x6f\x88\x12\x87\x77\x2b\x61\xb6\x6b\xc2\xaf\x35\x98\xe6\x04\x3b\xe0\xbf\xb0\xcb\xa6\x04\x6e\x8f\x7d\x75\x4a\xe6\x12\x08\xe1\x9e\xf4\x25\xdd\xae\xc3\xb3\x82\xde\x62\x08\x41\xd5\xb4\x89\x49\x49\x2c\xeb\xf5\x27\x06\xbb\x4a\xd0\x4a\x30\x06\x74\x8b\x63\x66\xd3\xe1\xaf\x57\xf6\xd3\x12\x8d\xcf\x5f\xd8\x2b\xba\xed\x4d\xba\xdd\x26\xd1\xdc\x72\xef\x7b\x3a\x63\x41\xb6\xb5\xa6\x01\x1c\x58\x6c\xcc\x17\x14\x6d\x73\x02\x13\xe3\xa1\x4e\x0a\x59\x59\xf9\x8f\xb0\x39\x7f\xa4\xb3\x3c\xd1\xdf\xf7\xd8\x4b\xcd\xa0\x82\x28\xfc\xd5\xff\x05\x00\x00\xff\xff\x08\x2c\x87\x26\xa9\x2a\x00\x00")

func distVeloxMinJsBytes() ([]byte, error) {
	return bindataRead(
		_distVeloxMinJs,
		"dist/velox.min.js",
	)
}

func distVeloxMinJs() (*asset, error) {
	bytes, err := distVeloxMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/velox.min.js", size: 10921, mode: os.FileMode(420), modTime: time.Unix(1456317995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/velox.min.js": distVeloxMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"velox.min.js": &bintree{distVeloxMinJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

