// Code generated by go-bindata.
// sources:
// dist/velox.min.js
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distVeloxMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x7b\x73\xe3\x36\x92\xff\x3f\x9f\x82\x42\xa5\x54\xe4\x1a\xa6\xe5\xd9\x64\xef\x4e\x0c\xec\x73\x3c\x4a\xe2\x94\x23\xcd\xd9\x9e\x4d\xae\x3c\x8e\x87\x96\x60\x89\x09\x0d\xf2\x00\xc8\x1e\x9d\xc5\x7c\xf6\xeb\xc6\x83\x0f\x49\x76\x66\xeb\xb6\x6a\xff\x91\x48\x3c\xfb\xf9\xeb\x46\x83\x07\x07\xc1\x23\xcf\x8b\x4f\xc1\x7e\xf0\x38\x88\xdf\xc4\x6f\xe0\x61\xa1\x75\xa9\x86\x07\x07\xf3\x4c\x2f\x96\x77\xf1\xb4\x78\x38\xf8\xad\xcc\xf2\xbc\x90\xe9\x81\x19\xfc\x05\xcc\xfa\x31\xcd\x1e\x78\xf0\xce\x36\x07\xdf\xcc\xf8\xe3\x7f\xfa\x41\x38\xe3\x08\xd6\xf9\xe9\xec\x2a\x38\x2d\xca\x95\xcc\xe6\x0b\x1d\xbc\x19\x1c\xfe\xed\x8b\xde\xfd\x52\x4c\x75\x56\x88\x30\x7a\x6e\x9e\x75\xf4\x9c\xdd\x87\xbd\x90\x8c\x1e\xb9\xd0\x97\xc5\x52\x4e\x39\xc9\x44\xa0\xa3\xe8\xf9\x31\x95\x01\x67\x07\xbf\x86\x1f\xd4\xfa\xc3\x72\x30\x38\x19\x44\x7b\xeb\xf6\xcb\x97\x07\x73\x2a\x58\x7b\x2d\xff\x1c\xd8\x95\xe3\xdb\xb2\xc8\xf3\x2b\x20\x57\x32\xc5\x35\x3e\x14\x4b\x1d\xb6\x28\x29\xe2\x69\x9a\xe7\x61\x16\x55\x54\x47\x55\x3d\xbd\x80\x2e\x2d\x57\x48\x5b\x16\x4b\x9e\xce\x56\x97\x3a\xd5\x9c\xb1\x2c\x3e\x3d\x9f\x5c\x8e\xde\x46\x92\xeb\xa5\x14\x09\xd2\xa8\x99\xe0\x4f\xc1\x2f\x3f\x9d\xff\x00\xd2\xbb\xe0\xff\xb3\xe4\x4a\x27\x3a\x2e\x4a\x2e\x42\xf2\xfd\xe8\x8a\xd0\x2c\x7e\x7f\x71\x4e\x7b\x83\x88\xea\x18\xe8\x70\x63\x7e\x80\x75\xb9\x0c\xc9\xc9\x74\xca\x4b\x4d\x28\xd1\xfc\x93\x3e\xe0\x28\x88\x7d\xa5\x61\xd7\x07\xb2\x7b\xc2\x69\x3a\x5d\xf0\xfd\xd3\x42\x68\x59\xe4\x30\x4f\x14\xfb\x53\x6c\x7a\x61\xf8\x2f\xfb\xae\x81\xcf\xf6\x7f\x06\xc5\xc2\x8c\x2e\xb1\x30\x4f\x2c\xf3\xbc\xc7\x54\xbf\xbf\x6b\x81\xf3\x54\xe9\x7d\xa3\xa0\xfd\xb3\xb7\x84\xaa\x88\x2e\x18\x21\xb0\x97\xb6\x02\x65\x5f\xf3\xaf\xe0\xad\x10\x46\x52\x0a\x25\x35\x5d\xa4\x62\xce\x59\x4b\xd2\x20\xca\xbf\x32\xa6\x17\x99\x6a\x09\x74\xbd\xfe\x6a\xab\xad\xdf\x7f\x33\x18\xb8\x56\x5c\x6b\xa9\x50\x93\x1b\x4a\x98\x8c\xc7\xa3\xd3\xab\xb3\xf1\xf7\xfd\x7e\x57\x43\x59\x3c\x79\x37\x1a\x83\xc4\x67\x99\x2a\x53\x3d\x5d\x18\xba\x43\x82\xda\x20\xf4\x59\xaf\x4a\x3e\xb4\x2f\x55\x14\x39\xf5\x11\x92\xa0\xb2\xb5\xa7\x44\x95\x85\x50\xfc\x0a\xb4\xb1\x5e\x13\x52\x4d\x71\x99\xb0\x88\x9e\x2b\x1c\x3e\x65\x20\xa2\xe5\x1d\x28\x28\x5c\xc4\x39\x17\x73\xbd\x88\x62\x55\xe6\x19\x6c\xf2\x41\x80\x28\x4b\x46\x1e\xb8\x52\xe9\x9c\x13\x9a\xb3\xeb\x1b\xba\x64\x03\x7a\x8f\x9b\xdc\x17\x30\x87\xe9\x64\xf9\xcd\xd4\xcd\x4c\x96\x7b\x7b\x11\x48\xe6\x9e\x4d\xaf\x97\x37\xb0\x75\x99\xa7\x53\x1e\x72\x4a\x60\x21\x10\xc2\x7d\x9c\x89\x19\xff\x34\xb9\x0f\x89\xb1\x0b\x12\x45\x25\x34\xfa\x71\xd6\x58\x86\xc7\x1f\xd4\x5f\x0e\x70\x4a\xc2\x73\xc5\x03\x58\xaf\x3b\x15\x6c\x55\xae\x60\xaa\xf9\x67\x65\x2a\x15\x3f\x03\x99\xb4\xd6\x31\x3d\xcd\x3a\x11\xcd\xd4\x38\x1d\x87\xa6\x39\x5a\xaf\xc3\x94\xd9\xc7\x17\x36\x98\xa5\x3a\x85\x59\x79\x5c\x2e\xd5\xa2\xbd\x2e\x76\xb4\x96\x7d\x61\x7a\x36\x1b\x42\xa7\x6a\x33\x06\x4d\x7f\xc6\x55\x36\x33\x93\xd0\x72\xeb\x11\x84\xc0\x90\x7e\x3f\xf7\x8a\x31\x18\x32\x33\xfe\x29\xc3\x3c\xfe\xad\xc8\x84\xd3\x52\x16\x2f\x65\x0e\xa6\x9c\x6c\x5a\x4a\x49\x67\x91\xd5\x5b\x4b\x91\xd5\x2e\x33\x15\x61\x1a\x55\x76\xe7\x56\x7b\xaf\x01\x09\xb0\xcd\xed\x79\xc7\x9b\xf6\xda\xd8\xf2\xb6\xd5\x72\x29\x0b\x59\x9b\xad\x7d\xab\xc0\x5b\x61\xe7\x68\x38\x78\x81\x26\xc4\x32\xf0\x62\x31\x0b\x23\xba\x1b\xf5\x74\x9c\xde\x15\x52\x87\x66\xa4\x73\x62\x14\xc9\xed\xa7\x85\x64\xba\x31\xf8\xcf\xa2\x87\x1a\x25\x17\xb1\x93\x55\x15\x55\xc6\x4f\x32\x43\x1c\x4d\xd9\xd7\x83\x01\xb5\x6a\x32\xb0\x91\x20\xde\xa3\x63\x81\x07\x65\x62\x4e\x7a\x0c\x17\x2b\xee\x01\xf2\xf5\x42\x16\x4f\x01\x2a\xeb\x72\x25\x74\xfa\x69\x84\xeb\x87\x64\x5c\xe8\x80\x8b\x62\x39\x5f\x04\xa9\x9c\x2f\x1f\x80\x12\x05\x56\x61\x78\x07\x5c\x65\x9a\x6e\x88\xc1\x8a\xa5\x25\x57\xf3\xde\x8a\x05\x86\x18\xdb\x88\x1c\x9b\x57\x80\xfc\x2a\x11\x71\x29\x0b\x5d\x20\x45\xec\x79\x9a\x17\x8a\x0f\xdb\x62\xdb\xb9\x8d\x51\x35\x9d\xe6\x3c\x95\xe0\x55\x5c\x3e\xa6\x79\xb8\xb1\x61\xd4\x6c\xd6\x48\xbe\xa1\x6f\x38\xa0\x08\x5a\xc3\x43\x6a\x17\x1b\xbe\xa1\x1d\xb9\x37\x34\x68\xca\xad\x4d\x0b\xb3\xf9\x35\xb9\x25\x7b\x7a\x8f\xfc\x90\x8a\x59\xce\xa5\x22\x37\x28\x5d\x11\x21\xd0\xe0\x28\xc9\x06\x89\xfc\x46\x78\xb0\x91\x00\x36\xe2\x5a\xde\xd8\x98\x67\xd4\xc3\xad\x1c\xaf\x49\x21\x60\xa5\x1b\xc0\xff\xd6\x5b\x67\x5c\x45\xd3\xd9\xcc\x90\x73\x9e\x41\x28\x11\x5c\x6e\x90\xb5\x9b\x20\x00\x8f\xdd\x1d\xe0\x61\x56\x2c\xdb\x5d\x16\x46\x70\x4b\xc9\x1f\x8a\x47\xfe\xda\xae\xff\x88\x30\xbc\x20\xf6\x0f\x13\x79\x04\xa2\xd9\xdf\x97\x08\xbe\x28\x12\xc6\x18\x2c\x26\x0c\x90\x03\xfe\x48\x7a\x18\x25\x77\xa0\xea\xdf\xab\x8a\x16\xc2\x18\xfa\xd0\x9a\x89\x70\x76\xee\x5f\x31\x96\xd8\xe7\xc6\x32\x40\xa1\x60\x98\x43\x88\x1d\x89\xdd\xb9\x4d\x33\x15\xce\x92\xd0\x6f\xbc\xf1\x16\x90\x29\x65\x82\x71\xfb\x96\x43\xc0\x35\x4c\x9f\x01\x76\x99\x18\x94\xc8\xb6\x65\x1a\x8f\xb3\x46\x6c\x1c\xb1\x89\x37\xcd\x44\xd8\x9d\xda\x55\x91\x0e\x4a\x1e\x8a\xd9\x32\xb7\xb9\x15\xe0\x92\x7d\x8b\xf9\xa7\x12\xac\x11\xbc\x13\x33\x87\x56\x0a\xc6\x44\x55\x19\xbd\xb9\x10\x49\x9d\xb1\xdf\xde\x42\x50\x04\x64\x51\xeb\x75\x57\x0d\xad\xc4\xcb\x71\x37\x85\x18\xaa\xe5\x72\xaa\x0b\x84\x94\x5a\x09\x01\x10\xc0\x23\x1e\x2f\x52\x35\x79\x12\xef\x24\x88\x4f\xea\x55\x28\x23\x20\x4a\xa3\x22\x38\xfc\x44\x1d\x47\xe4\xcd\x33\x50\xd9\xb4\x23\x50\x88\x0a\x32\x40\x83\x13\x49\x6f\x67\x22\x28\x2d\x7d\xea\x29\x43\x4c\xab\xa1\xe6\x79\x9a\x2a\x4e\x96\x10\x4b\xee\x33\xc1\x67\x64\x68\xde\xef\x8a\x02\xdc\x58\xb8\x37\x07\x50\xf6\x45\x2c\x1f\xee\xb8\x24\x43\x9b\xf7\x41\xd2\x00\x06\x93\x98\x9e\xe2\xee\x37\x3e\xd5\x64\x88\x96\x04\x2a\x81\x0e\xed\xb2\xc3\xc0\xbd\x73\x34\xc4\x69\x88\x39\x2d\x82\xdf\x14\x4c\x7b\xbd\xd6\xce\x18\x21\x5e\x70\x1f\xae\xec\xb4\xde\x61\xe2\xc5\x25\x20\x75\x28\x98\x1f\x9a\x14\x47\x22\x11\x36\x63\xe8\x01\x63\xd7\xe2\x86\x72\xf8\x89\x9a\x89\xee\x61\xe0\x20\xb8\x84\xad\x00\x82\x33\xbf\x00\x4c\x2c\x81\x8e\x66\xeb\x74\xe7\x9e\x49\xfa\xd9\x1b\x25\x20\xc1\x74\x99\xeb\xa1\xef\xa9\xda\x59\x34\x6a\xc2\x2d\x0b\x76\x0f\xcc\xc8\x86\x19\x09\x7b\x44\xcf\x60\x58\x31\x24\x8b\xf2\xb4\x98\xf1\x13\x0d\xee\x9a\xd8\x03\x01\x3f\x62\x5f\xfd\x7b\xbf\xff\xf5\xbf\x1d\x81\x63\x36\xdb\x02\x51\x55\x55\x33\x59\xef\x94\x79\xc7\xaa\xed\x8c\x66\xc0\x77\xef\x10\x22\xcf\x00\xc2\x8e\x97\x70\xb2\x38\x52\xb0\xa9\x04\x2b\x53\x37\x54\xed\xed\xd5\x5c\x97\x0c\x3c\x2c\xd5\x0b\xf4\x36\xfa\xc8\x4a\x9f\xd2\x1d\x40\xae\xb0\x02\x2f\x1d\xb1\x43\x3a\x61\x8f\x6e\x1d\x3a\x67\x8f\x45\x36\x0b\x06\x49\x62\x74\x9a\xb1\xc7\xeb\xd1\x0d\x15\xfd\xbe\x6d\x06\xa5\xcf\xc1\xa0\xeb\x97\xd5\x75\x76\x73\x0c\x73\x62\x65\xe0\x65\x40\x47\x91\x4b\x46\x60\xfd\xe1\x88\xb1\xc9\xfe\x21\x8c\x9f\x3b\x22\x22\x6a\x67\xf6\xcc\x32\xc6\x9d\x20\xaa\x64\xe0\xf6\x40\xad\xa4\x6a\xff\x90\x6a\x3a\x87\x34\x6d\xb4\xb7\x47\xeb\x4d\xb2\x7e\x7f\x74\xc4\x26\xd1\x73\xca\xee\xaf\x25\x9c\x3f\x1c\x80\x4b\xba\x02\x69\x68\x0f\x68\xc6\x16\x57\xd6\x16\xc9\x3e\xc1\x89\x51\xc6\x56\x5e\x42\x98\xd0\x60\x17\xf0\xd2\x2b\xe0\x60\xd4\x8a\xca\x33\x38\xa6\x7d\x2a\xc1\xd8\xf9\x2c\x48\x45\xb0\x14\x2a\x9b\x83\xf3\x04\x77\xe0\x06\xfb\x87\x03\x70\x6d\xcd\xe7\x5c\x06\x40\xeb\x92\xd3\xe0\x21\xfd\x1d\xfc\x27\xd0\x0b\x6e\x66\x4b\x7e\xcf\x25\x17\x53\x98\x60\x06\x98\x8e\x54\xca\x74\x15\xf0\x9c\x63\x54\x0f\xc0\x49\x17\xa6\xf9\x7f\xb9\x2c\xf6\x71\xd9\x59\x60\xf2\x3d\x38\xb2\x40\x84\xbc\x38\xb9\x3a\x9b\x8c\x6f\xdf\x9d\x5c\xfd\x70\x7b\x76\x7e\x3e\xfa\xfe\xe4\xfc\xf6\xe4\xe2\xe2\xe4\xbf\x6f\xcf\xc6\x6f\x47\xbf\x10\x23\x18\x2b\x41\x2a\x21\xb3\x6b\x52\xdd\x8c\x1e\x0e\x22\xe4\xdc\x0a\xc8\xb2\x47\x20\xa0\x21\xfb\x28\xaa\x7e\x3f\x3b\xf2\x22\xe8\x72\x7c\x05\xe4\x28\x60\x3a\xbb\xcf\x3c\x35\xc1\x4f\xef\x2f\xaf\x82\xf1\xe4\x2a\xb8\xe3\xc1\x1c\x84\x0a\x51\x1f\xc8\x06\x91\x18\x5e\x0d\x52\x04\x00\x33\x8e\x2d\x85\x98\x57\x33\xdb\x61\xe5\xef\x27\xe7\xef\x47\xb7\x93\xf7\x57\xb7\x93\xef\x6e\xbf\x9d\xbc\x1f\xbf\xbd\xdc\xe4\x22\x65\xcb\x57\x94\x59\xf9\xcc\x17\x94\xbf\x7f\xd8\x03\x4f\xaf\xf3\xe3\x3f\x08\x62\x6a\xc6\xb2\x26\xab\xfe\xe3\x10\x4e\xcc\x68\x72\xad\xa6\x01\x36\xfd\x81\x39\xbf\x37\x9e\xfc\x75\xe3\xe9\xad\x00\x3d\x01\xdc\x01\x2a\xe3\xa7\x54\x0a\xd0\x71\x48\x14\x44\x9e\x05\x37\x9c\x5a\x3c\x0c\x7e\xe7\x2b\x15\x08\x48\xdd\xd4\xb2\xc4\x20\x03\x20\xeb\x17\x59\x19\x7f\xf0\x7e\x1c\xa4\x8d\x1f\xa7\xae\x20\x50\xdb\xb4\x87\x52\x00\x1a\x34\x57\x2b\x41\x56\xa7\x8c\xe0\xad\x0e\x7e\x9b\xb6\x3a\xe0\x73\x23\x77\xc4\x30\x58\xf6\x9a\x37\xe8\x35\x48\x6a\xb0\xaa\x77\x56\x70\xe8\x12\x54\xd2\xc2\xfa\x85\x5b\xb5\x4e\x4e\xe1\xa4\xea\xc1\x7c\xbd\x46\x00\xef\x1a\xc9\x04\xa2\x58\x6a\x91\xc8\x32\x9d\x7a\x39\x74\xd4\x0d\x26\x73\x7b\x32\xbe\x9d\x7c\xfb\x23\x24\x7e\x04\xf6\xe3\xc6\x4e\x41\xa6\xf9\x35\x47\x99\xbf\xb4\xea\xc7\xa2\xfc\x18\x94\x2e\x58\xfa\x3d\x20\x2f\x41\x2b\x2b\xfc\x28\x15\xb8\x68\x86\x7c\x5f\x7c\x77\xba\xff\xb7\xff\x18\xbc\xe9\xec\x3f\x79\x07\x9e\x02\x36\x87\xa7\xf8\x66\xf3\xad\x4c\x9c\x5b\x10\x7a\x89\x16\xec\xdc\xa6\x26\x0d\xdc\x32\xdb\xae\xba\xbd\x65\x48\x30\xaf\x43\xe7\x43\xb6\x41\x8b\xd3\xa2\x5c\xf9\x57\x30\xdb\x1d\x24\xdd\xcb\xe2\xe1\x45\x92\xb0\x73\x9b\xa4\x12\x8e\xf2\x08\x2b\x61\x5a\x62\x5a\x97\xde\xe5\xc6\x24\x3e\xe2\xde\x1f\x41\x45\xb3\xe0\x23\xee\xfb\xb1\x25\xc2\xa8\x43\xfe\x77\x17\x93\x9f\x6e\x2f\x46\xff\xf5\xfe\xec\x62\xb4\x41\xbf\xc3\x0e\x47\xbe\x73\xa7\x56\x8b\xc6\xba\x4a\xc3\x50\x6d\xd0\x3c\x36\xe0\xf7\x22\x27\xa6\xf7\xf3\x59\x01\x32\x3e\xd2\xe0\xa3\xdb\xdf\x31\x85\x7b\xbf\xcc\x94\xc5\x9c\x7f\x0a\x57\x69\xe8\xd9\xf9\x97\xf3\x73\x7a\x32\x46\xef\x82\x43\xd5\xd5\xc9\xd9\xf8\x16\x90\x74\xf4\xdd\xd9\xb8\xcb\x9f\xc9\xf6\x1d\x8f\x86\x83\x67\x9b\x25\x59\x7b\x6f\x45\x7c\x1f\xe5\x15\x2b\xb6\x5b\x71\xa5\x0c\x22\xb3\xda\x83\x90\x6d\x1e\xba\xcc\x9f\xa6\xc2\x70\xc8\x25\x00\xd1\x03\x22\x81\xe1\xaa\xa1\x3f\x48\xb5\x09\x07\x33\xae\x32\x09\xde\x8a\x9b\x6f\x7b\x8d\x63\xe8\xe4\x6d\xcd\x42\x8d\xf5\x3b\x14\x63\x0f\x4a\xad\x86\xdb\x39\x6f\x34\x85\x90\x66\x99\x04\x72\x8b\x57\xc9\x45\xc2\x3a\x94\xa6\x86\x3e\x0c\x6f\x3a\x98\x15\xdc\xaa\x8f\x7f\x82\xd3\xd8\x36\xcd\xef\xc7\x17\xa3\xcb\xc9\xf9\xdf\x4f\xbe\x3d\x1f\x6d\x53\xfd\x9a\xcb\x1b\x4d\x2c\xd8\x73\x51\x0e\x2d\xe9\x14\x77\x1d\x5a\xb7\xa7\xc6\x88\x86\xd6\x87\x2a\x5a\x42\xca\xe8\xd2\x21\x1e\x5e\x2f\x6e\x9c\x76\x21\x86\xbf\x4a\x0f\x6c\x55\xc6\x22\x7d\xe0\xff\x00\xff\xb8\xfb\xe7\x4a\xc0\x80\xc5\x4e\x09\x34\x51\x66\xe1\x8e\xca\xb6\xb4\xdc\x33\x67\x82\x0e\x35\xef\xf0\xd0\x1f\x28\xac\xbf\x42\xa6\x14\x3c\x2c\x95\xc6\x24\x03\x8c\xc8\x27\x0f\x97\xe0\xb8\xa3\xf1\xe9\xc8\x07\x13\x93\x00\x11\x23\x01\x38\x57\xb1\x1f\x2f\x27\xe3\xd8\xe4\x3d\xa1\x79\xb4\x40\x9a\xdd\xaf\x30\x66\xd1\xac\x7d\xa4\x87\x1c\xb2\x37\x70\xd5\xb5\x76\xf2\x2f\xbe\xa9\x73\x74\x3c\x03\x6c\xa4\x9f\xe6\x30\x20\x22\x57\x24\x92\xc6\xb6\xf0\x54\xa7\x74\x0a\x14\x03\x54\xcf\xfc\xe9\x47\x26\x96\x35\x59\x99\xb4\x41\xc7\xe8\xeb\x2b\xab\xea\x29\x68\xb1\x55\x59\x71\x33\x26\x26\x64\xc6\x98\x3a\x1c\xb7\x9e\x87\xed\x93\x9d\xbd\x15\xb8\xbe\x69\xce\x2b\x36\xcc\xeb\xcd\x23\xa5\x00\x80\xe2\xb6\x94\x00\xa7\x0a\xb7\x03\x87\x73\x2d\x96\xf7\x9e\xc1\x25\x37\x2a\x09\xfe\x64\x07\x99\x02\xf3\x3c\x43\x1a\x0b\xc7\x0c\x57\x86\xd8\x3d\x7e\x06\x59\x9e\xe6\x66\x9a\x1b\x6b\x7c\xf3\xf3\x17\xdf\x5a\x1a\xcf\x31\xb6\x6c\xb0\xe9\x0e\x66\x26\xda\x64\xe5\xf9\xc9\x42\x41\xf1\xc0\x4c\xcd\x83\x19\xef\xa0\x60\x73\x46\x67\x0c\x62\x60\x6b\x80\xc9\x35\xad\x93\x49\x4b\x19\x0e\x47\xe2\xd0\x49\xff\x99\xc4\x7d\xf6\xc6\x88\xf9\xbb\x65\x28\x4d\x32\x47\x1b\x29\x46\x15\x45\x32\x76\x94\xa3\x6c\x3f\xc3\xf1\x55\x45\x97\xaf\x69\xdd\x57\x7e\x38\x1d\xb4\x97\xfe\x53\xf5\xb7\x26\x1e\x46\xff\x0f\x03\xc8\x63\xfc\xb3\xf2\xce\x63\xfc\xb3\x22\xc8\x63\xfc\xb3\x0c\xe6\x31\xfe\x55\xf4\x7e\x93\x11\x38\xf7\xc6\x96\xc8\x96\x7f\x43\xce\xde\xcd\x84\x1b\xae\x9a\xc7\x4d\xa7\xe1\xb6\x0e\xd3\x21\x12\x53\xe7\xa6\xb0\xb0\x2d\x8d\xd6\x19\xff\x05\x57\xc4\x55\xf3\x1d\x14\x62\xf9\xb1\xbd\xf0\xa6\xe0\x6a\xb1\xe1\xf9\xfe\x25\xeb\xc6\x27\x6b\xdd\xfa\x4f\x8d\xac\x61\xca\xdb\xd9\xab\xc2\xdf\x41\xc9\x06\xa8\xea\x08\xc2\xca\x66\xdb\x2b\x96\xd9\xb5\xcb\xaa\x4a\xa6\xec\x04\x81\x3d\xce\x94\xf9\x3f\xee\xbc\xed\x22\x40\x1b\x48\x83\x58\xe7\x2a\x52\xcd\xc1\xc7\x81\x36\xd6\xf4\x0d\xd2\xb2\x2c\xb1\xd7\x1f\x2f\xdc\x90\xba\x03\x0f\xcd\xf0\x42\xa0\x5d\xea\xb5\x0e\xe0\x8a\x8a\xbe\x26\x89\x91\x93\x09\xfb\x6c\xce\x98\x4c\xba\xd2\xa5\x8f\x96\xac\xb0\x0d\x5a\x72\xce\x32\x7f\xba\xe3\xe0\xfb\x3a\xa2\xa2\x42\x14\xd6\xf1\x8f\xaa\x10\x26\xc8\x99\xa2\x1d\x9b\x61\xdd\xb1\x7e\xaa\xa3\x0c\x53\xcd\x1b\x67\x0b\x2c\x46\x62\x21\x99\x3d\x57\x10\xc4\x5a\x65\xbb\xe6\x7c\x60\x0b\x99\x60\xbc\xee\xc9\x89\xc0\x89\x82\xfa\xd6\x7a\xcd\x66\xf9\xcd\x3e\xac\x57\x36\xcf\x75\xef\x06\xe1\x9b\x9c\xd4\xe3\x7c\xb7\xf9\x8f\x68\x2d\x7b\x5b\x9e\x6a\x95\x25\xa3\x67\x90\x9d\xc8\x81\x0f\x26\xd2\xc7\x6c\x8e\xbb\x41\xc3\x39\x34\x34\x8e\x0b\xe1\x98\x7f\x93\xd6\xb5\x19\x08\xc7\x7e\x12\x64\xdf\xe0\x98\x71\xba\x84\x69\x78\x37\xe7\xde\xcd\x73\xd8\xb9\xca\xd6\xa8\xe7\xa6\x04\x6a\x6b\x9f\x81\x8a\x7f\xbe\xc4\x9a\x65\x8f\xc7\x3f\xf3\xbb\xcb\x62\xfa\x3b\x77\x37\x30\xe4\x0a\xb4\x18\xdc\xc1\x93\xe2\xb2\xc9\x78\xdc\x39\x3e\xa8\x47\x2b\x62\xef\x60\x9e\x14\x83\x23\xb5\x39\xda\x27\x6e\xe9\xcb\xcb\x91\xf5\x35\xa5\x78\xd3\xe9\x4b\x85\x6e\x17\xd0\x5c\x9d\xe0\x98\x8f\x0b\x80\xa2\xa0\x90\xee\x19\x96\x20\x98\x37\x08\x50\xbc\x60\xc4\x7e\x7e\x40\x22\x7a\xf0\x6b\xf8\xa4\xd6\xf8\xa1\x42\xa4\x8e\x87\x07\x06\x1e\xc1\xb4\xcc\xa8\xd2\x56\x87\xa7\x45\xbe\x47\x0e\x0e\xc8\x5e\x19\x2f\x0a\xa5\xf7\x84\xb3\xe8\x27\xb4\x0f\xc1\x44\x53\xfd\xf8\x15\xd7\x39\xa0\xe4\x49\x61\x01\xc4\x0c\x5a\xca\x1c\xcc\xbc\x27\x9b\xd2\x42\x6d\x64\xd2\xc9\xe7\x4c\x18\xf3\xf0\x27\x7c\x2b\x05\x78\xf1\x1e\xf1\xc8\xa5\x42\x7f\x70\x91\xa4\x10\xcb\xd2\xd8\x5c\x2b\xe1\xa9\x7c\x97\xb9\x5a\xd8\xd9\x33\x2d\x84\x80\xe5\x77\xf6\xcd\x32\xf5\x72\xb7\xeb\xe1\x33\xac\x7f\xb6\x5b\xc0\x2c\xec\x81\x87\x3c\xbe\x21\x34\xc5\x3b\x4e\xb5\x75\x35\xe1\xae\x4a\x20\x1d\x2d\x5c\x93\x0f\xe7\xa9\x4d\xa6\xc0\xa8\x65\x95\xa0\xf9\x80\x3b\x52\xa3\xfe\x9d\xa1\x4e\x85\x38\xc6\x80\x3c\x0e\x03\x7d\xda\xf1\x68\x12\x2f\x4e\x80\x51\xf5\x0c\xa3\x4b\x96\xd1\xda\x4d\xc0\x90\xec\x31\xa1\x3b\xdd\x5f\x28\x6e\xaa\x0b\xda\x7a\x7c\x47\x3b\xf7\x09\x2a\x37\xcb\x09\x4c\x9d\x75\x3b\x83\x35\xd8\x0b\xc9\xe3\x56\x9b\x29\x2d\x25\x1e\x68\x8f\xea\xaa\x32\x44\xbc\xb2\x28\xc3\x56\x2e\xed\x92\x52\xf2\x25\x1e\x3b\xc4\xf5\xe0\x66\xbd\x36\x4d\x40\x4f\x9d\x30\x0a\x9b\xc3\xda\xf6\x08\xdf\xd9\xa2\x55\x6b\xf7\x62\xd7\x55\xc2\xe3\xcd\xbb\xb7\x90\x58\x99\x10\xf0\x6c\xba\xb3\xfb\xfe\xde\xf7\x27\xf6\xb3\x85\xeb\xe6\x9a\xc8\xdf\xdc\xba\xaf\x22\x88\xb9\xe9\x24\x78\xe3\x0d\x2c\x15\x53\x83\xe6\x49\xd1\xb9\x0b\xb5\x16\xb4\x75\x1b\x5a\xc3\x0f\x28\xc7\x5f\xc3\x5a\x00\xa2\xf6\x9b\x82\xd6\x04\x73\x45\xea\x6f\xa3\x9b\xb1\xb1\x8e\x1a\x2b\x75\xd5\x6e\x1c\x0a\x5e\x13\xba\x1e\x10\x59\xba\x72\x37\x89\xf6\x85\x1d\x0e\x06\xfe\xf3\x0d\xef\xb6\x7b\xe1\xc1\x87\x63\x07\x08\xbe\x2d\x3a\x26\x7d\x32\x24\xc7\x24\xda\x23\x25\x23\x7b\xd9\x1e\xe9\x3f\xc2\x7f\xdb\x4f\x3d\x8a\x1d\xd7\x54\x18\xf3\xaf\x71\x0e\x20\x73\xd8\xed\x6a\xdd\x94\x81\x09\x3e\x63\xd9\xfa\x14\x4e\xf2\xd0\x98\xa5\xb9\x1a\x42\x5e\x61\x69\xb3\xb7\x66\xc9\x34\x06\x3d\x8f\x52\x00\xdf\x76\x24\xe6\x66\x3d\x7f\xd7\xca\xf8\x35\xc1\x77\x73\xef\x7a\x07\x01\x16\xef\x3f\x1d\xfb\x25\x24\x16\x20\xb3\x58\xe3\x47\x4c\xdd\x3b\x66\xdf\x65\x66\x98\x0b\x3b\xfa\x57\xfe\x15\x48\xbf\x41\x88\xd7\x74\xe6\xf1\xc1\x8b\xbb\xa2\xee\x71\xd8\xfd\x72\x67\x5b\x75\x35\x4d\x2d\xe5\x59\xf0\x70\x0a\xc1\x86\xa4\x25\x36\xbc\xad\xdc\x21\x08\xcc\xd4\xad\x0c\x20\xe7\xc4\x41\xc0\x74\xa8\xc1\x0c\xda\xce\xd7\x92\x37\x7e\xa1\xd4\xf9\xd8\xa2\xd5\xe7\xee\xe2\xd7\xeb\xce\xe4\x5a\x8f\x5b\x53\xeb\x1e\xff\x51\x17\x8e\x30\xbe\x00\x92\x00\x04\xe2\x62\xb6\x33\x03\xdb\x34\x56\x78\x7c\x69\x43\xdf\xdf\xf9\x7e\xa9\xb5\x31\xde\xfb\x37\x76\x67\xbf\xda\x00\x73\xab\x4b\x1d\x56\xca\x5b\x2a\x34\xe3\x08\xf6\x92\xc8\x8e\xca\xc4\xeb\xae\x66\xc7\xd4\xea\xf2\xaf\xed\xcf\xe2\x5a\x2e\xb9\x65\x4e\x48\x9d\xbf\xf8\x6e\xeb\xce\x02\x28\xd6\x33\x44\xbb\xf4\xc0\xcd\xe5\x76\xab\x48\xe0\x44\x67\xf8\x6a\x47\x3e\xe8\xf3\x89\xa2\x30\x44\x1d\x37\x43\x2c\x8d\x61\x34\x14\xf1\x5d\x31\x5b\x39\x69\x02\x9a\x1f\x87\x02\x51\x40\xa7\xc7\x2e\xbd\x0b\x7d\x0f\xb5\x43\xa3\xe1\x62\xab\x89\x12\x4f\x77\x2b\x65\x76\x63\xe2\x2f\xcd\x32\xcd\x0e\xae\xc1\xe3\x8f\x8f\xe0\xf5\xa2\x51\x37\xd0\x0b\xff\x64\x2e\xe3\x36\x61\xca\xa9\xb3\xc3\x36\x41\x53\x77\x09\x84\x22\x4e\xc0\xe6\x53\x82\x4d\x55\xb7\xa2\xf9\x60\x23\x35\x08\x3b\xca\x0c\xdd\x2a\xbb\x3f\x5b\xd9\x4e\x0a\xda\x59\x44\x07\x68\xff\xc2\xde\xd0\x2e\x50\xf4\xfb\x4d\xd6\xd9\x41\xee\x2d\xf3\x71\xeb\xb5\x0d\xa8\x59\x38\x72\x14\xda\xcf\x29\xb6\x0e\x45\x5e\x36\x1a\x9d\x8f\xc7\x26\xe1\x63\xaa\x0a\x9f\x60\xad\xe2\x89\xce\x8a\xa9\xf9\xf6\xc7\x5d\x78\x46\x15\xc4\xdb\x2f\xfe\x2f\x00\x00\xff\xff\xe4\xfb\x2f\xf5\xc5\x2a\x00\x00")

func distVeloxMinJsBytes() ([]byte, error) {
	return bindataRead(
		_distVeloxMinJs,
		"dist/velox.min.js",
	)
}

func distVeloxMinJs() (*asset, error) {
	bytes, err := distVeloxMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/velox.min.js", size: 10949, mode: os.FileMode(420), modTime: time.Unix(1456971194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/velox.min.js": distVeloxMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"velox.min.js": &bintree{distVeloxMinJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

