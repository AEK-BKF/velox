// Code generated by go-bindata.
// sources:
// dist/velox.min.js
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distVeloxMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x3a\x69\x73\xe3\x36\x96\xdf\xf3\x2b\x28\x54\x4a\x45\x8e\x21\x5a\xee\x49\x66\x77\xc5\x46\x7b\x1d\xb7\x92\x38\xe5\x48\xbd\xb6\x7b\x92\x2d\xb7\xe3\xa6\x25\x48\x62\x42\x03\x5c\x10\xb2\x5b\x6b\x31\xbf\x7d\xdf\xc3\x41\x52\x87\xdd\x3d\xb5\x53\x35\x5f\x24\x12\xc7\xc3\xbb\x2f\xf0\xf0\x30\x78\xe0\xb9\xfc\x14\xf4\x82\x87\x7e\xfc\x2a\xee\xc3\xc3\x42\xeb\xa2\x1c\x1c\x1e\xce\x33\xbd\x58\xde\xc5\x13\x79\x7f\xf8\x7b\x91\xe5\xb9\x54\xe9\xa1\x59\xfc\x15\xec\xfa\x29\xcd\xee\x79\xf0\xce\x0e\x07\xaf\xa7\xfc\xe1\x3f\xfd\x22\xdc\xf1\x06\xe0\xfc\x7c\x76\x15\x9c\xca\x62\xa5\xb2\xf9\x42\x07\xaf\xfa\x47\x7f\xfb\xaa\x33\x5b\x8a\x89\xce\xa4\x08\xa3\xa7\xe6\x59\x47\x4f\xd9\x2c\xec\x84\x64\xf8\xc0\x85\xbe\x94\x4b\x35\xe1\x24\x13\x81\x8e\xa2\xa7\x87\x54\x05\x9c\x1d\xfe\x16\x7e\x28\xd7\x1f\x96\xfd\xfe\x49\x3f\x3a\x58\xb7\x5f\xbe\x3e\x9c\x53\xc1\xda\xb0\xfc\x73\x60\x21\xc7\xb7\x85\xcc\xf3\x2b\x40\x57\xb1\x92\x6b\x7c\x90\x4b\x1d\xb6\x30\x91\xf1\x24\xcd\xf3\x30\x8b\x2a\xaa\xa3\xaa\xde\x2e\x61\x4a\xab\x15\xe2\x96\xc5\x8a\xa7\xd3\xd5\xa5\x4e\x35\x67\x2c\x8b\x4f\xcf\xc7\x97\xc3\xb7\x91\xe2\x7a\xa9\x44\x82\x38\x6a\x26\xf8\x63\xf0\xeb\xcf\xe7\x3f\x02\xf7\x2e\xf8\xff\x2c\x79\xa9\x13\x1d\xcb\x82\x8b\x90\xfc\x30\xbc\x22\x34\x8b\xdf\x5f\x9c\xd3\x4e\x3f\xa2\x3a\x06\x3c\xdc\x9a\x1f\x01\x2e\x57\x21\x39\x99\x4c\x78\xa1\x09\x25\x9a\x7f\xd2\x87\x1c\x19\xd1\x2b\x35\x9c\x7a\x4f\xf6\x6f\x38\x4d\x27\x0b\xde\x3b\x95\x42\x2b\x99\xc3\x3e\x21\x7b\x13\x1c\x7a\x66\xf9\xaf\x3d\x37\xc0\xa7\xbd\x5f\x40\xb0\xb0\x63\x13\x59\xd8\x27\x96\x79\xde\x61\x65\xb7\xbb\x0f\xc0\x79\x5a\xea\x9e\x11\x50\xef\xec\x2d\xa1\x65\x44\x17\x8c\x10\x38\x4b\x5b\x86\xb2\x6f\xf9\x37\xf0\x26\x85\xe1\x54\x89\x9c\x9a\x2c\x52\x31\xe7\xac\xc5\x69\x60\xe5\x5f\x19\xd3\x8b\xac\x6c\x31\x74\xbd\xfe\x66\x67\xac\xdb\x7d\xd5\xef\xbb\x51\x84\xb5\x2c\x51\x92\x5b\x42\x18\x8f\x46\xc3\xd3\xab\xb3\xd1\x0f\xdd\xee\xa6\x84\xb2\x78\xfc\x6e\x38\x02\x8e\x4f\xb3\xb2\x48\xf5\x64\x61\xf0\x0e\x09\x4a\x83\xd0\x27\xbd\x2a\xf8\xc0\xbe\x54\x51\xe4\xc4\x47\x48\x82\xc2\xd6\x1e\x93\xb2\x90\xa2\xe4\x57\x20\x8d\xf5\x9a\x90\x6a\x82\x60\x42\x19\x3d\x55\xb8\x7c\xc2\x80\x45\xcb\x3b\x10\x50\xb8\x88\x73\x2e\xe6\x7a\x11\xc5\x65\x91\x67\x70\xc8\x07\x01\xac\x2c\x18\xb9\xe7\x65\x99\xce\x39\xa1\x39\xbb\xbe\xa1\x4b\xd6\xa7\x33\x3c\x64\x26\x61\x0f\xd3\xc9\xf2\xf5\xc4\xed\x4c\x96\x07\x07\x11\x70\x66\xc6\x26\xd7\xcb\x1b\x38\xba\xc8\xd3\x09\x0f\x39\x25\x00\x08\x98\x30\x8b\x33\x31\xe5\x9f\xc6\xb3\x90\x18\xbd\x20\x51\x54\xc0\xa0\x5f\x67\x95\x65\x70\xfc\xa1\xfc\xcb\x21\x6e\x49\x78\x5e\xf2\x00\xe0\x6d\x6e\x05\x5d\x55\x2b\xd8\x6a\xfe\x59\x91\xaa\x92\x9f\x01\x4f\x5a\x70\xcc\x4c\x03\x27\xa2\x59\x39\x4a\x47\xa1\x19\x8e\xd6\xeb\x30\x65\xf6\xf1\x99\x03\xa6\xa9\x4e\x61\x57\x1e\x17\xcb\x72\xd1\x86\x8b\x13\x2d\xb0\xcf\x6c\xcf\xa6\x03\x98\x2c\xdb\x84\xc1\xd0\xe7\xa8\xca\xa6\x66\x13\x6a\x6e\xbd\x82\x10\x58\xd2\xed\xe6\x5e\x30\xc6\x87\x4c\x8d\x7d\xaa\x30\x8f\x7f\x97\x99\x70\x52\xca\xe2\xa5\xca\x41\x95\x93\x6d\x4d\x29\xe8\x34\xb2\x72\x6b\x09\xb2\xda\xa7\xa6\x22\x4c\xa3\xca\x9e\xdc\x1a\xef\x34\x4e\x02\x74\x73\x77\xdf\xf1\xb6\xbe\x36\xba\xbc\xab\xb5\x5c\x29\xa9\x6a\xb5\xb5\x6f\x15\x58\x2b\x9c\x1c\x0d\xfa\xcf\xe0\x84\xbe\x0c\xac\x58\x4c\xc3\x88\xee\xf7\x7a\x3a\x4e\xef\xa4\xd2\xa1\x59\xe9\x8c\x18\x59\x72\xfb\x69\xa1\x98\x6e\x14\xfe\x8b\xf0\xa1\x46\xc8\x32\x76\xbc\xaa\xa2\xca\xd8\x49\x66\x90\xa3\x29\xfb\xb6\xdf\xa7\x56\x4c\xc6\x6d\x24\xe8\xef\xd1\xb0\xc0\x82\x32\x31\x27\x1d\x86\xc0\xe4\x0c\x5c\xbe\x5e\x28\xf9\x18\xa0\xb0\x2e\x57\x42\xa7\x9f\x86\x08\x3f\x24\x23\xa9\x03\x2e\xe4\x72\xbe\x08\x52\x35\x5f\xde\x03\x26\x25\x68\x85\xa1\x1d\xfc\x2a\xd3\x74\x8b\x0d\x96\x2d\x2d\xbe\x9a\xf7\x56\x2c\x30\xc8\xd8\x41\xa4\xd8\xbc\x82\xcb\xaf\x12\x11\x17\x4a\x6a\x89\x18\xb1\xa7\x49\x2e\x4b\x3e\x68\xb3\x6d\xef\x31\x46\xd4\x74\x92\xf3\x54\x81\x55\x71\xf5\x90\xe6\xe1\xd6\x81\x51\x73\x58\xc3\xf9\x06\xbf\x41\x9f\xa2\xd3\x1a\x1c\x51\x0b\x6c\xf0\x8a\x6e\xf0\xbd\xc1\x41\x53\x6e\x75\x5a\x98\xc3\xaf\xc9\x2d\x39\xd0\x07\xe4\xc7\x54\x4c\x73\xae\x4a\x72\x83\xdc\x15\x11\x3a\x1a\x5c\xa5\x58\x3f\x51\xaf\x85\x77\x36\x0a\x9c\x8d\xb8\x56\x37\x36\xe6\x19\xf1\x70\xcb\xc7\x6b\x22\x05\x40\xba\x01\xff\xdf\x7a\xdb\x58\x57\xd1\x74\x3a\x35\xe8\x9c\x67\x10\x4a\x04\x57\x5b\x68\xed\x47\x08\x9c\xc7\xfe\x09\xb0\x30\xcb\x96\xdd\x29\xeb\x46\xf0\x48\xc5\xef\xe5\x03\x7f\xe9\xd4\x7f\x84\x19\x9e\x11\xbd\xa3\x44\xbd\x01\xd6\xf4\x7a\x0a\x9d\x2f\xb2\x84\x31\x06\xc0\x84\x71\xe4\xe0\x7f\x14\x3d\x8a\x92\x3b\x10\xf5\x1f\x55\x45\xa5\x30\x8a\x3e\xb0\x6a\x22\x9c\x9e\xfb\x57\x8c\x25\xf6\xb9\xd1\x0c\x10\x28\x28\xe6\x00\x62\x47\x62\x4f\x6e\xe3\x4c\x85\xd3\x24\xb4\x1b\xaf\xbc\x12\x32\xa5\x4c\x30\x6e\xdf\x72\x08\xb8\x86\xe8\x33\xf0\x5d\x26\x06\x25\xaa\xad\x99\xc6\xe2\xac\x12\x1b\x43\x6c\xe2\x4d\xb3\x11\x4e\xa7\x16\x2a\xe2\x41\xc9\xbd\x9c\x2e\x73\x9b\x5b\x81\x5f\xb2\x6f\x31\xff\x54\x80\x36\x82\x75\x62\xe6\xd0\x4a\xc1\x98\xa8\x2a\x23\x37\x17\x22\xa9\x53\xf6\xdb\x5b\x08\x8a\xe0\x59\xca\xf5\x7a\x53\x0c\xad\xc4\xcb\x51\x37\x81\x18\xaa\xd5\x72\xa2\x25\xba\x94\x5a\x08\x01\x20\xc0\x23\x1e\x2f\xd2\x72\xfc\x28\xde\x29\x60\x9f\xd2\xab\x50\x45\x80\x94\x46\x41\x70\xf8\x89\x36\x0c\x91\x37\xcf\x80\x65\x33\x8e\x8e\x42\x54\x90\x01\x1a\x3f\x91\x74\xf6\x26\x82\xca\xe2\x57\x3e\x66\xe8\xd3\x6a\x57\xf3\x34\x49\x4b\x4e\x96\x10\x4b\x66\x99\xe0\x53\x32\x30\xef\x77\x52\x82\x19\x0b\xf7\xe6\x1c\x94\x7d\x11\xcb\xfb\x3b\xae\xc8\xc0\xe6\x7d\x90\x34\x80\xc2\x24\x66\x46\xde\xfd\xce\x27\x9a\x0c\x50\x93\x40\x24\x30\xa1\x5d\x76\x18\xb8\x77\x8e\x8a\x38\x09\x31\xa7\x45\xe7\x37\x01\xd5\x5e\xaf\xb5\x53\x46\x88\x17\xdc\x87\x2b\xbb\xad\x73\x94\x78\x76\x09\x48\x1d\x24\xf3\x4b\x13\xf9\x46\x24\xc2\x66\x0c\x1d\x20\xec\x5a\xdc\x50\x0e\x3f\x51\xb3\xd1\x3d\xf4\x9d\x0b\x2e\xe0\x28\x70\xc1\x99\x07\x00\x1b\x0b\xc0\xa3\x39\x3a\xdd\x7b\x66\x92\x7e\xf1\x41\x09\x70\x30\x5d\xe6\x7a\xe0\x67\xaa\x76\x16\x8d\x92\x70\x60\x41\xef\x81\x18\xd5\x10\xa3\xe0\x8c\xe8\x09\x14\x2b\x86\x64\x51\x9d\xca\x29\x3f\xd1\x60\xae\x89\x2d\x08\xf8\x1b\xf6\xcd\xbf\x77\xbb\xdf\xfe\xdb\x1b\x30\xcc\xe6\x58\x40\xaa\xaa\x6a\x22\xeb\x93\x32\x6f\x58\xb5\x9e\xd1\x0c\xe8\xee\x1c\x41\xe4\xe9\x43\xd8\xf1\x1c\x4e\x16\x6f\x4a\x38\x54\x81\x96\x95\x37\xb4\x3c\x38\xa8\xa9\x2e\x18\x58\x58\xaa\x17\x68\x6d\xf4\x81\x15\x3e\xa5\x3b\x84\x5c\x61\x05\x56\x3a\x64\x47\x74\xcc\x1e\x1c\x1c\x3a\x67\x0f\x32\x9b\x06\xfd\x24\x31\x32\xcd\xd8\xc3\xf5\xf0\x86\x8a\x6e\xd7\x0e\x83\xd0\xe7\xa0\xd0\xf5\xcb\xea\x3a\xbb\x39\x86\x3d\x71\x69\xdc\x4b\x9f\x0e\x23\x97\x8c\x00\xfc\xc1\x90\xb1\x71\xef\x08\xd6\xcf\x1d\x12\x11\xb5\x3b\x3b\x06\x8c\x31\x27\x88\x2a\x19\x98\x3d\x60\xab\x68\xd9\x3b\xa2\x9a\xce\x21\x4d\x1b\x1e\x1c\xd0\xfa\x90\xac\xdb\x1d\xbe\x61\xe3\xe8\x29\x65\xb3\x6b\x05\xf5\x87\x73\xe0\x8a\xae\x80\x1b\xda\x3b\x34\xa3\x8b\x2b\xab\x8b\xa4\x47\x70\x63\x94\xb1\x95\xe7\x10\x26\x34\x38\x05\xb4\x74\x24\x14\x46\xad\xa8\x3c\x85\x32\xed\x53\x01\xca\xce\xa7\x41\x2a\x82\xa5\x28\xb3\x39\x18\x4f\x70\x07\x66\xd0\x3b\xea\x83\x69\x6b\x3e\xe7\x2a\x00\x5c\x97\x9c\x06\xf7\xe9\x1f\x60\x3f\x81\x5e\x70\xb3\x5b\xf1\x19\x57\x5c\x4c\x60\x83\x59\x60\x26\x52\xa5\xd2\x55\xc0\x73\x8e\x51\x3d\x00\x23\x5d\x98\xe1\xff\xe5\x4a\xf6\x10\xec\x34\x30\xf9\x1e\x94\x2c\x10\x21\x2f\x4e\xae\xce\xc6\xa3\xdb\x77\x27\x57\x3f\xde\x9e\x9d\x9f\x0f\x7f\x38\x39\xbf\x3d\xb9\xb8\x38\xf9\xef\xdb\xb3\xd1\xdb\xe1\xaf\xc4\x30\xc6\x72\x90\x2a\xc8\xec\x9a\x54\x37\xa3\x47\xfd\x08\x29\xb7\x0c\xb2\xe4\x11\x08\x68\x48\x3e\xb2\xaa\xdb\xcd\xde\x78\x16\x6c\x52\x7c\x05\xe8\x94\x40\x74\x36\xcb\x3c\x36\xc1\xcf\xef\x2f\xaf\x82\xd1\xf8\x2a\xb8\xe3\xc1\x1c\x98\x0a\x51\x1f\xd0\x06\x96\x18\x5a\x8d\xa7\x08\xc0\xcd\x38\xb2\x4a\xf4\x79\x35\xb1\x1b\xa4\xfc\xfd\xe4\xfc\xfd\xf0\x76\xfc\xfe\xea\x76\xfc\xfd\xed\x77\xe3\xf7\xa3\xb7\x97\xdb\x54\xa4\x6c\xf9\x82\x30\x2b\x9f\xf9\x82\xf0\x7b\x47\x1d\xb0\xf4\x3a\x3f\xfe\x93\xa0\x4f\xcd\x58\xd6\x64\xd5\x7f\x1e\x41\xc5\x8c\x2a\xd7\x1a\xea\xe3\xd0\x9f\x98\xf3\x7b\xe5\xc9\x5f\x56\x9e\xce\x0a\xbc\x27\x38\x77\x70\x95\xf1\x63\xaa\x04\xc8\x38\x24\x25\x44\x9e\x05\x37\x94\x5a\x7f\x18\xfc\xc1\x57\x65\x20\x20\x75\x2b\x97\x05\x06\x19\x70\xb2\x1e\xc8\xca\xd8\x83\xb7\xe3\x20\x6d\xec\x38\x75\x0d\x81\x5a\xa7\xbd\x2b\x05\x47\x83\xea\x6a\x39\xc8\xea\x94\x11\xac\xd5\xb9\xdf\x66\xac\x0e\xf8\xdc\xf0\x1d\x7d\x18\x80\xbd\xe6\x8d\xf7\xea\x27\xb5\xb3\xaa\x4f\x2e\xa1\xe8\x12\x54\x51\x69\xed\xc2\x41\xad\x93\x53\xa8\x54\xbd\x33\x5f\xaf\xd1\x81\x6f\x2a\xc9\x18\xa2\x58\x6a\x3d\x91\x25\x3a\xf5\x7c\xd8\x10\x37\xa8\xcc\xed\xc9\xe8\x76\xfc\xdd\x4f\x90\xf8\x11\x38\x8f\x1b\x3d\x05\x9e\xe6\xd7\x1c\x79\xfe\x1c\xd4\x8f\xb2\xf8\x18\x14\x2e\x58\xfa\x33\x20\x2f\x41\x2d\x93\x7e\x55\x19\xb8\x68\x86\x74\x5f\x7c\x7f\xda\xfb\xdb\x7f\xf4\x5f\x6d\x9c\x3f\x7e\x07\x96\x02\x3a\x87\x55\x7c\x73\xf8\x4e\x26\xce\xad\x13\x7a\x0e\x17\x9c\xdc\xc5\x26\x0d\x1c\x98\x5d\x53\xdd\x3d\x32\x24\x98\xd7\xa1\xf1\x21\xd9\x20\xc5\x89\x2c\x56\xfe\x15\xd4\x76\x0f\x4a\x33\x25\xef\x9f\x45\x09\x27\x77\x51\x2a\xa0\x94\x47\xb7\x12\xa6\x05\xa6\x75\xe9\x5d\x6e\x54\xe2\x23\x9e\xfd\x11\x44\x34\x0d\x3e\xe2\xb9\x1f\x5b\x2c\x8c\x36\xd0\xff\xfe\x62\xfc\xf3\xed\xc5\xf0\xbf\xde\x9f\x5d\x0c\xb7\xf0\x77\xbe\xc3\xa1\xef\xcc\xa9\x35\xa2\xb1\xaf\xd2\x10\x54\x2b\x34\x8f\x8d\xf3\x7b\x96\x12\x33\xfb\xe5\xa4\x00\x1a\x1f\x69\xf0\xd1\x9d\xef\x88\xc2\xb3\x9f\x27\xca\xfa\x9c\x7f\x0a\x55\x69\xe8\xc9\xf9\x97\xd3\x73\x7a\x32\x42\xeb\x82\xa2\xea\xea\xe4\x6c\x74\x0b\x9e\x74\xf8\xfd\xd9\x68\x93\x3e\x93\xed\x3b\x1a\x0d\x05\x4f\x36\x4b\xb2\xfa\xde\x8a\xf8\x3e\xca\x97\x4c\xee\x8e\x22\xa4\x0c\x22\x73\x79\x00\x21\xdb\x3c\x6c\x12\x7f\x9a\x0a\x43\x21\x57\xe0\x88\xee\xd1\x13\x18\xaa\x1a\xfc\x83\x54\x9b\x70\x30\xe5\x65\xa6\xc0\x5a\xf1\xf0\x5d\xab\x71\x04\x9d\xbc\xad\x49\xa8\x7d\xfd\x1e\xc1\xd8\x42\xa9\x35\x70\x3b\xe7\x8d\xa4\xd0\xa5\x59\x22\x01\x5d\xf9\x22\xba\x88\xd8\x06\xa6\xa9\xc1\x0f\xc3\x9b\x0e\xa6\x92\x5b\xf1\xf1\x4f\x50\x8d\xed\xe2\xfc\x7e\x74\x31\xbc\x1c\x9f\xff\xfd\xe4\xbb\xf3\xe1\x2e\xd6\x2f\x99\xbc\x91\xc4\x82\x3d\xc9\x62\x60\x51\xa7\x78\xea\xc0\x9a\x3d\x35\x4a\x34\xb0\x36\x54\xd1\x02\x52\x46\x97\x0e\xf1\xf0\x7a\x71\xe3\xa4\x0b\x31\xfc\x45\x7c\xe0\xa8\x22\x16\xe9\x3d\xff\x07\xe8\xc7\xd3\xbf\x94\x03\xc6\x59\xec\xe5\x40\x13\x65\x16\xae\x54\xb6\xad\xe5\x8e\xa9\x09\x36\xb0\x79\x87\x45\x7f\x50\x62\xff\x15\x32\xa5\xe0\x7e\x59\x6a\x4c\x32\x40\x89\x7c\xf2\x70\x09\x86\x3b\x1c\x9d\x0e\x7d\x30\x31\x09\x10\x31\x1c\x80\xba\x8a\xfd\x74\x39\x1e\xc5\x26\xef\x09\xcd\xa3\x75\xa4\xd9\x6c\x85\x31\x8b\x66\xed\x92\x1e\x72\xc8\x4e\xdf\x75\xd7\xda\xc9\xbf\x78\x5d\xe7\xe8\x58\x03\x6c\xa5\x9f\xa6\x18\x10\x91\x6b\x12\x29\xa3\x5b\x58\xd5\x95\x3a\x05\x8c\xc1\x55\x4f\x7d\xf5\xa3\x12\x4b\x9a\xaa\x4c\xda\xa0\x63\xb4\xf5\x95\x15\xf5\x04\xa4\xd8\xea\xac\xb8\x1d\x63\x13\x32\x63\x4c\x1d\x8e\x5b\xcf\x83\x76\x65\x67\x6f\x05\xae\x6f\x9a\x7a\xc5\x86\x79\xbd\x5d\x52\x0a\x70\x50\xdc\xb6\x12\xa0\xaa\x70\x27\x70\xa8\x6b\xb1\xbd\xf7\x04\x26\xb9\xd5\x49\xf0\x95\x1d\x64\x0a\xcc\xd3\x0c\x69\x2c\x94\x19\xae\x0d\xb1\x7f\xfd\x14\xb2\x3c\xcd\xcd\x36\xb7\xd6\xd8\xe6\x97\x03\xdf\x01\x8d\x75\x8c\x6d\x1b\x6c\x9b\x83\xd9\x89\x3a\x59\x79\x7a\xb2\x50\x50\x2c\x98\xa9\x79\x30\xeb\x9d\x2b\xd8\xde\xb1\xb1\x06\x7d\x60\x6b\x81\xc9\x35\xad\x91\x29\x8b\x19\x2e\x47\xe4\xd0\x48\xff\x99\xc8\x7d\xf1\xc1\xe8\xf3\xf7\xf3\x50\x99\x64\x8e\x36\x5c\x8c\x2a\x8a\x68\xec\x69\x47\xd9\x79\x86\xeb\xab\x8a\x2e\x5f\x92\xba\xef\xfc\x70\xda\x6f\x83\xfe\xac\xf8\x5b\x1b\x8f\xa2\xff\x87\x02\xe4\x31\xfe\x59\x7e\xe7\x31\xfe\x59\x16\xe4\x31\xfe\x59\x02\xf3\x18\xff\x2a\x3a\xdb\x26\x04\xea\xde\xd8\x22\xd9\xb2\x6f\xc8\xd9\x37\x33\xe1\x86\xaa\xe6\x71\xdb\x68\xb8\xed\xc3\x6c\x20\x89\xa9\x73\xd3\x58\xd8\xe5\x46\xab\xc6\x7f\xc6\x14\x11\x6a\xbe\x07\x43\x6c\x3f\xb6\x01\x6f\x33\xae\x66\x1b\xd6\xf7\xcf\x69\x37\x3e\x59\xed\xd6\x9f\x55\xb2\x86\x28\xaf\x67\x2f\x32\x7f\x0f\x26\x5b\x4e\x55\x47\x10\x56\xb6\xc7\x5e\xd0\xcc\x4d\xbd\xac\xaa\x64\xc2\x4e\xd0\xb1\xc7\x59\x69\xfe\x8f\x37\xde\xf6\x21\xa0\x8d\x4b\x83\x58\xe7\x3a\x52\x4d\xe1\xe3\x9c\x36\xf6\xf4\x8d\xa7\x65\x59\x62\xaf\x3f\x9e\xb9\x21\x75\x05\x0f\xcd\xf0\x42\xa0\xdd\xea\xb5\x06\xe0\x9a\x8a\xbe\x27\x89\x91\x93\x09\xfb\x6c\x6a\x4c\xa6\x5c\xeb\xd2\x47\x4b\x26\xed\x80\x56\x9c\xb3\xcc\x57\x77\x1c\x6c\x5f\x47\x54\x54\xe8\x85\x75\xfc\x53\x29\x85\x09\x72\xa6\x69\xc7\xa6\xd8\x77\xac\x9f\xea\x28\xc3\xca\xe6\x8d\xb3\x05\x36\x23\xb1\x91\xcc\x9e\x2a\x08\x62\xad\xb6\x5d\x53\x1f\xd8\x46\x26\x28\xaf\x7b\x72\x2c\x70\xac\xa0\x7e\xb4\x86\xd9\x80\xdf\x9e\xc3\x7e\x65\xf3\x5c\xcf\x6e\x21\xbe\x4d\x49\xbd\xce\x4f\x9b\xff\x88\xd6\xbc\xb7\xed\xa9\x56\x5b\x32\x7a\x02\xde\x89\x1c\xe8\x60\x22\x7d\xc8\xe6\x78\x1a\x0c\x9c\xc3\x40\x63\xb8\x10\x8e\xf9\xeb\xb4\xee\xcd\x40\x38\xf6\x9b\x20\xfb\x06\xc3\x8c\xd3\x25\x6c\xc3\xbb\x39\xf7\x6e\x9e\xc3\x8d\xab\x6c\xe7\xb5\x7d\x0b\xd4\xf6\x3e\x83\x32\xfe\xe5\xd2\xda\xc3\x63\xc9\xa0\x24\x36\xa5\x79\xe2\xa6\x2e\x2f\x87\x76\xae\x2c\x79\x33\xe9\x5b\x7d\x26\xac\x93\x2b\xe0\x7c\x9d\xa0\x98\x8f\x03\x00\x62\x20\x95\x7b\x06\x10\x04\xe3\x3e\xd4\xcb\x21\x67\xc4\x7e\x3e\x40\x22\x7a\xf8\x5b\xf8\x58\xae\xf1\x43\x83\xa8\x3c\x1e\x1c\x1a\xf7\x66\x1a\xa2\xb0\xaa\xb0\xdd\xdd\x89\xcc\x0f\xc8\xe1\x21\x39\x28\xe2\x85\x2c\xf5\x81\xd7\xc8\x47\x23\x5f\x48\x18\xeb\xee\xc5\x6f\x08\xe7\x90\x92\xc7\x12\x1b\x18\x66\xd1\x52\xe5\xa0\xb2\x1d\xd1\xb4\x06\x6a\x25\x11\x36\xd7\x22\x67\xc2\x88\xd7\x57\xe8\xf6\x26\x09\x5e\xbc\x7a\x3f\x70\x55\xa2\x3e\xbb\x48\x20\xc5\xb2\x30\x3a\xd3\x4a\x58\x2a\x3f\x65\xae\x06\xf6\xcc\x4c\xa4\x10\xa6\x53\x86\x4d\xc8\xf6\x48\x68\xfa\x50\x1d\x1e\xff\xc2\xef\x2e\xe5\xe4\x0f\x5e\x77\x8b\xd3\x1c\x9c\x25\x36\x9c\xa0\x46\xba\x03\x3c\x4b\xae\x9a\x7c\xd3\x75\x51\x82\x7a\x17\x5e\x81\xd9\xf2\x85\x3c\x40\x95\x9f\xe2\x8d\x65\xb9\x73\xd1\xe0\x2e\x3e\x20\xb9\xf4\x7a\xe0\x83\x73\x6a\x53\x23\x50\x51\x55\x25\xa8\x0c\x60\x5c\xd4\x28\xc3\xde\xc0\x55\x86\xb8\xc6\xb8\x6c\x5c\x06\xd2\xb5\xeb\x51\x41\x9e\xdd\x00\xab\xea\x1d\x46\xb2\x2c\xa3\xb5\xd2\x83\x5a\xd9\xa4\x7f\x73\xbb\xbf\x1e\xdc\x16\x1e\x8c\x75\xf8\x9e\x71\xee\xd9\xc7\x0d\x38\x81\x89\xb0\x6e\xe7\xa3\xc6\x93\x42\x2a\xb8\x33\x66\x1a\x45\x89\x77\x9b\x6f\xea\x1e\x31\xc4\xaf\x42\x16\x61\x2b\x33\x76\x29\x26\xf9\x1a\x8b\x08\x71\xdd\xbf\x59\xaf\xcd\x10\xe0\x53\xa7\x7f\xc2\x66\xa4\x76\x3c\xc2\x77\xb6\x68\x75\xce\x3d\xdb\x75\x95\xf0\x78\xfb\x26\x2d\x24\x96\x27\x04\xaa\x05\xba\x77\x7a\x36\xf3\xf3\x89\xfd\x08\xe1\xba\xb9\xf4\xf1\xf7\xb0\xee\x1b\x07\x62\xee\x2d\x09\xde\x5f\x03\x49\x72\x62\x7c\x73\x22\x37\x6e\x36\xad\x2a\xee\xdc\x6d\xd6\xce\x04\x84\xe3\x2f\x55\xad\x3b\xa1\xf6\x0b\x81\xd6\x06\x73\xe1\xe9\xef\x96\x9b\xb5\xb1\x8e\x1a\x75\x77\xbd\x6b\x5c\x0a\x36\x14\xba\x19\x60\x59\xba\x72\xf7\x82\xf6\x85\x1d\xf5\xfb\xfe\x63\x0c\x6f\xc4\x07\xe1\xe1\x87\x63\xe7\x1e\xfc\x58\x74\x4c\xba\x64\x40\x8e\x49\x74\x40\x0a\x46\x0e\xb2\x03\xd2\x7d\x80\xff\xb6\xd5\x26\xce\x55\x1c\xd7\x58\x18\xf5\xaf\xed\x06\x1c\xe0\x60\x73\xaa\x75\xef\x05\x2a\xf8\x84\x4d\xe8\x53\xa8\xcb\x61\x30\x4b\xf3\x72\x00\x59\x82\xc5\xcd\xde\x81\x25\x93\x18\xe4\x3c\x4c\xc1\x95\xb6\xe3\x2a\x37\xf0\xfc\xcd\x29\xe3\xd7\x04\xdf\xcd\x2d\xea\x1d\x84\x4b\xbc\xcd\x74\xe4\x17\x90\x26\xc4\x1a\xbf\x47\xda\xbc\x2e\x36\xe3\x66\xad\xb9\x78\xa3\x7f\xe5\xdf\x00\xdf\xa7\x59\xf9\x05\xd2\xf2\x2e\xc6\x33\xba\xa2\xee\x71\xb0\xf9\x05\x4e\x4d\xb8\xf5\x0c\xfa\x59\x8a\xb8\xc9\x09\x6a\x8a\x20\x1f\xc4\xf6\x27\x90\x10\xee\x08\x17\x1e\xdb\xa6\xd5\xe2\x66\x6b\xc5\xe6\x07\x12\xad\x35\xee\xfe\x7c\xbd\xde\x0b\xac\x96\xda\xb3\xa0\xea\x15\xfe\xc3\xac\xf6\x4a\x63\x09\x61\x4b\x21\xed\x55\xff\xae\xea\x5a\x99\x40\xa5\x4e\xf1\xbb\x89\xbd\x69\xd7\x67\xc8\xfe\x0c\xa6\xac\x8d\x29\x5e\xf6\x37\xea\x69\x3f\xd5\x00\xad\xac\xfb\x1b\x80\xcc\x8e\xb0\xcd\x22\x82\x53\x04\xa5\x0b\xfb\xfc\x3d\x74\x5b\x66\xb6\x84\xe7\xe6\x6a\xd9\xb4\x76\x0b\xdb\x45\x65\x3e\x14\x98\x0f\x9d\x54\xbb\x4b\x50\x97\xf2\xb2\xa6\xd5\x20\xd2\x8e\x6f\x30\x67\x82\x96\x8a\xef\xe4\x14\x4c\xb7\xe3\x23\x66\xf4\xec\x0e\x82\x9c\x76\x11\x16\x43\x95\x42\x4b\xd7\xe9\xb1\x4b\xc8\x42\x0f\x81\x5a\x98\xd1\x60\xb1\x33\x44\x89\x27\xad\x95\xe4\xba\x35\xf1\xd7\x06\x8c\x63\x76\x33\x10\xbe\xb0\xcb\x85\x71\xbf\xc7\xbd\x7a\xf5\xf0\x41\x5f\xf9\x27\xba\xe9\x9f\x2a\xcb\x75\x73\xdd\xbf\x2d\x9c\x56\xb0\xef\xdb\x65\xfb\xbf\x1d\xd9\x4d\x0a\x0c\xf8\xbf\xb0\x57\x74\xd3\xa2\xbb\xdd\x26\xcd\xdb\x70\xae\xed\xcf\x18\xdb\x20\xdb\x8e\xa3\x01\x1c\x39\x55\xb1\xdf\x2f\xb4\xb5\x1a\xa8\xe1\xb1\x49\xc9\x58\x59\x85\x8f\xb0\x59\x3e\xd2\xa9\x9c\x98\xaf\x6b\xdc\x95\x62\x54\x41\x0c\xfc\xea\xff\x02\x00\x00\xff\xff\xe7\xe1\x73\x2d\x27\x2a\x00\x00")

func distVeloxMinJsBytes() ([]byte, error) {
	return bindataRead(
		_distVeloxMinJs,
		"dist/velox.min.js",
	)
}

func distVeloxMinJs() (*asset, error) {
	bytes, err := distVeloxMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/velox.min.js", size: 10791, mode: os.FileMode(420), modTime: time.Unix(1456108419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/velox.min.js": distVeloxMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"velox.min.js": &bintree{distVeloxMinJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

